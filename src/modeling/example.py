import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' 
import tensorflow as tf
import numpy as np
from models import AudioClassifier

num_output_logits = 1

def classify(row):
  x = row
  o = [0] * num_output_logits
  h_0 = max((((17.917032 * float(x[0]))+ (-102.258705 * float(x[1]))+ (-64.641396 * float(x[2]))+ (-80.11167 * float(x[3]))+ (-90.27748 * float(x[4]))+ (205.63028 * float(x[5]))+ (91.55882 * float(x[6]))+ (93.81393 * float(x[7]))+ (194.17337 * float(x[8]))+ (169.15508 * float(x[9]))+ (69.84247 * float(x[10]))+ (59.532207 * float(x[11]))+ (120.78913 * float(x[12]))+ (60.75942 * float(x[13]))+ (54.91742 * float(x[14]))+ (65.99294 * float(x[15]))+ (62.669914 * float(x[16]))+ (26.493263 * float(x[17]))+ (8.066617 * float(x[18]))+ (25.66694 * float(x[19]))+ (-95.43802 * float(x[20]))+ (-94.825745 * float(x[21]))+ (-73.530235 * float(x[22]))+ (-86.21675 * float(x[23]))+ (-80.3401 * float(x[24]))+ (-65.48072 * float(x[25]))+ (-64.18998 * float(x[26]))+ (-50.950146 * float(x[27]))+ (-77.744125 * float(x[28]))+ (-60.84258 * float(x[29]))+ (-48.51448 * float(x[30]))+ (-37.405113 * float(x[31]))+ (-56.942318 * float(x[32]))+ (-49.250206 * float(x[33]))+ (-47.358513 * float(x[34]))+ (-7.7308626 * float(x[35]))+ (13.832215 * float(x[36]))+ (21.916332 * float(x[37]))+ (-40.11963 * float(x[38]))+ (-32.5461 * float(x[39]))+ (-0.07387091 * float(x[40]))+ (-23.28411 * float(x[41]))+ (-30.891338 * float(x[42]))+ (-19.399824 * float(x[43]))+ (-36.09728 * float(x[44]))+ (8.201451 * float(x[45]))+ (-2.5420833 * float(x[46]))+ (-25.281652 * float(x[47]))+ (20.405258 * float(x[48]))+ (16.60658 * float(x[49])))+ ((2.5506392 * float(x[50]))+ (9.674823 * float(x[51]))+ (2.978423 * float(x[52]))+ (-21.297958 * float(x[53]))+ (19.766998 * float(x[54]))+ (-22.041433 * float(x[55]))+ (9.699801 * float(x[56]))+ (1.3889954 * float(x[57]))+ (10.633615 * float(x[58]))+ (23.09199 * float(x[59]))+ (27.959217 * float(x[60]))+ (-6.5095 * float(x[61]))+ (-3.1770713 * float(x[62]))+ (17.29947 * float(x[63]))+ (-13.729827 * float(x[64]))+ (-12.038586 * float(x[65]))+ (-41.883446 * float(x[66]))+ (-38.904026 * float(x[67]))+ (-33.40351 * float(x[68]))+ (-20.97823 * float(x[69]))+ (-81.90461 * float(x[70]))+ (-26.748297 * float(x[71]))+ (-58.235466 * float(x[72]))+ (-55.76321 * float(x[73]))+ (-50.074684 * float(x[74]))+ (-39.141247 * float(x[75]))+ (9.829598 * float(x[76]))+ (-26.237778 * float(x[77]))+ (24.960636 * float(x[78]))+ (5.687594 * float(x[79]))+ (28.967567 * float(x[80]))+ (-10.467345 * float(x[81]))+ (-1.5568116 * float(x[82]))+ (26.937275 * float(x[83]))+ (32.20476 * float(x[84]))+ (22.936932 * float(x[85]))+ (2.7939384 * float(x[86]))+ (17.532318 * float(x[87]))+ (21.290955 * float(x[88]))+ (12.656176 * float(x[89]))+ (-25.915691 * float(x[90]))+ (43.00266 * float(x[91]))+ (12.302273 * float(x[92]))+ (26.980402 * float(x[93]))+ (-5.8819313 * float(x[94]))) + -1.0652112), 0)
  h_1 = max((((8.291172 * float(x[0]))+ (74.50104 * float(x[1]))+ (87.27038 * float(x[2]))+ (35.769917 * float(x[3]))+ (91.702484 * float(x[4]))+ (-23.853539 * float(x[5]))+ (-33.28069 * float(x[6]))+ (-34.72041 * float(x[7]))+ (-34.044815 * float(x[8]))+ (-7.8308644 * float(x[9]))+ (-85.61044 * float(x[10]))+ (-91.205345 * float(x[11]))+ (-61.47804 * float(x[12]))+ (-84.17775 * float(x[13]))+ (-61.830788 * float(x[14]))+ (-25.150585 * float(x[15]))+ (-23.358961 * float(x[16]))+ (-12.885944 * float(x[17]))+ (-12.601713 * float(x[18]))+ (2.0922537 * float(x[19]))+ (-51.563072 * float(x[20]))+ (-50.74243 * float(x[21]))+ (-37.649765 * float(x[22]))+ (-70.4124 * float(x[23]))+ (-83.39896 * float(x[24]))+ (-7.152525 * float(x[25]))+ (-22.159029 * float(x[26]))+ (-28.496193 * float(x[27]))+ (-36.874268 * float(x[28]))+ (-6.014237 * float(x[29]))+ (5.706031 * float(x[30]))+ (12.0826235 * float(x[31]))+ (18.956835 * float(x[32]))+ (39.22312 * float(x[33]))+ (26.275152 * float(x[34]))+ (-6.5783014 * float(x[35]))+ (-6.9758506 * float(x[36]))+ (9.838764 * float(x[37]))+ (7.1701455 * float(x[38]))+ (-4.6603103 * float(x[39]))+ (-18.111479 * float(x[40]))+ (-15.826872 * float(x[41]))+ (9.441402 * float(x[42]))+ (6.821188 * float(x[43]))+ (4.7728014 * float(x[44]))+ (18.790907 * float(x[45]))+ (32.057453 * float(x[46]))+ (34.60796 * float(x[47]))+ (-8.393724 * float(x[48]))+ (23.561003 * float(x[49])))+ ((2.810877 * float(x[50]))+ (15.547838 * float(x[51]))+ (-1.1979595 * float(x[52]))+ (19.782152 * float(x[53]))+ (39.511814 * float(x[54]))+ (18.758432 * float(x[55]))+ (14.845975 * float(x[56]))+ (36.474625 * float(x[57]))+ (20.75974 * float(x[58]))+ (47.86746 * float(x[59]))+ (-4.754476 * float(x[60]))+ (-7.0679817 * float(x[61]))+ (-0.2825204 * float(x[62]))+ (-0.96918005 * float(x[63]))+ (15.1563425 * float(x[64]))+ (-6.5711403 * float(x[65]))+ (6.0820007 * float(x[66]))+ (-3.0287848 * float(x[67]))+ (24.816341 * float(x[68]))+ (-2.7142792 * float(x[69]))+ (4.9377813 * float(x[70]))+ (16.196182 * float(x[71]))+ (10.621165 * float(x[72]))+ (-4.0906677 * float(x[73]))+ (4.7440376 * float(x[74]))+ (19.62928 * float(x[75]))+ (-4.538243 * float(x[76]))+ (0.7778206 * float(x[77]))+ (-12.683113 * float(x[78]))+ (-12.687359 * float(x[79]))+ (6.209174 * float(x[80]))+ (6.668607 * float(x[81]))+ (10.811239 * float(x[82]))+ (4.9741707 * float(x[83]))+ (-14.183571 * float(x[84]))+ (36.71863 * float(x[85]))+ (22.728285 * float(x[86]))+ (58.027016 * float(x[87]))+ (69.50343 * float(x[88]))+ (40.56116 * float(x[89]))+ (32.785877 * float(x[90]))+ (8.693323 * float(x[91]))+ (11.707586 * float(x[92]))+ (20.41989 * float(x[93]))+ (-10.616292 * float(x[94]))) + -6.238916), 0)
  h_2 = max((((-6.389061 * float(x[0]))+ (-1.5136778 * float(x[1]))+ (-1.0963608 * float(x[2]))+ (0.22171392 * float(x[3]))+ (-0.90255976 * float(x[4]))+ (-26.709677 * float(x[5]))+ (-29.00483 * float(x[6]))+ (-22.153225 * float(x[7]))+ (-19.045311 * float(x[8]))+ (-33.959175 * float(x[9]))+ (-4.9265003 * float(x[10]))+ (-0.44642866 * float(x[11]))+ (-6.5888925 * float(x[12]))+ (-7.0046325 * float(x[13]))+ (-3.9748902 * float(x[14]))+ (-9.521516 * float(x[15]))+ (-8.09389 * float(x[16]))+ (-9.691041 * float(x[17]))+ (-14.355259 * float(x[18]))+ (-8.81332 * float(x[19]))+ (19.010618 * float(x[20]))+ (21.382895 * float(x[21]))+ (23.858374 * float(x[22]))+ (19.017365 * float(x[23]))+ (26.41259 * float(x[24]))+ (0.40705982 * float(x[25]))+ (3.2089407 * float(x[26]))+ (3.33751 * float(x[27]))+ (9.228611 * float(x[28]))+ (1.5627289 * float(x[29]))+ (4.913494 * float(x[30]))+ (15.755491 * float(x[31]))+ (5.572555 * float(x[32]))+ (8.519912 * float(x[33]))+ (12.91299 * float(x[34]))+ (-10.486498 * float(x[35]))+ (-19.739754 * float(x[36]))+ (-13.65564 * float(x[37]))+ (-8.07546 * float(x[38]))+ (-11.134248 * float(x[39]))+ (-2.287814 * float(x[40]))+ (4.926582 * float(x[41]))+ (2.296308 * float(x[42]))+ (-0.7561757 * float(x[43]))+ (-4.9106245 * float(x[44]))+ (-16.586344 * float(x[45]))+ (-11.982634 * float(x[46]))+ (-17.408667 * float(x[47]))+ (-16.232464 * float(x[48]))+ (-8.019688 * float(x[49])))+ ((1.8166264 * float(x[50]))+ (-0.27156878 * float(x[51]))+ (-1.0041736 * float(x[52]))+ (0.9716905 * float(x[53]))+ (1.2818531 * float(x[54]))+ (-10.056959 * float(x[55]))+ (-8.135266 * float(x[56]))+ (6.8604574 * float(x[57]))+ (-8.73384 * float(x[58]))+ (-6.7824445 * float(x[59]))+ (-2.583893 * float(x[60]))+ (-0.19756283 * float(x[61]))+ (3.0449872 * float(x[62]))+ (-0.19551797 * float(x[63]))+ (3.8723173 * float(x[64]))+ (-2.8495705 * float(x[65]))+ (3.411876 * float(x[66]))+ (0.5240964 * float(x[67]))+ (6.382643 * float(x[68]))+ (3.0459764 * float(x[69]))+ (1.9533267 * float(x[70]))+ (-8.298214 * float(x[71]))+ (5.2990174 * float(x[72]))+ (-2.9434054 * float(x[73]))+ (-4.127913 * float(x[74]))+ (-10.614586 * float(x[75]))+ (-8.660487 * float(x[76]))+ (-8.480678 * float(x[77]))+ (-13.094502 * float(x[78]))+ (-5.9241786 * float(x[79]))+ (-9.1747875 * float(x[80]))+ (-15.972407 * float(x[81]))+ (-19.130154 * float(x[82]))+ (-8.14385 * float(x[83]))+ (-11.127693 * float(x[84]))+ (-14.205715 * float(x[85]))+ (-22.728354 * float(x[86]))+ (-17.283422 * float(x[87]))+ (-16.068941 * float(x[88]))+ (-27.68245 * float(x[89]))+ (-11.720396 * float(x[90]))+ (-11.360079 * float(x[91]))+ (-11.877063 * float(x[92]))+ (-16.808826 * float(x[93]))+ (-7.7697086 * float(x[94]))) + 23.05273), 0)
  h_3 = max((((-0.23715715 * float(x[0]))+ (3.870213 * float(x[1]))+ (1.5430015 * float(x[2]))+ (-10.058829 * float(x[3]))+ (-24.157978 * float(x[4]))+ (-6.834335 * float(x[5]))+ (1.0729702 * float(x[6]))+ (-11.0681305 * float(x[7]))+ (-18.102629 * float(x[8]))+ (-23.180182 * float(x[9]))+ (-18.002703 * float(x[10]))+ (-7.226112 * float(x[11]))+ (-18.366463 * float(x[12]))+ (-14.910498 * float(x[13]))+ (-17.424147 * float(x[14]))+ (-13.868691 * float(x[15]))+ (-9.360038 * float(x[16]))+ (-7.2895 * float(x[17]))+ (-6.4515085 * float(x[18]))+ (-6.51241 * float(x[19]))+ (-2.0467098 * float(x[20]))+ (0.7682394 * float(x[21]))+ (0.82761204 * float(x[22]))+ (0.57419944 * float(x[23]))+ (-8.018942 * float(x[24]))+ (18.209196 * float(x[25]))+ (7.937435 * float(x[26]))+ (1.9989498 * float(x[27]))+ (2.8018117 * float(x[28]))+ (-3.389149 * float(x[29]))+ (5.411667 * float(x[30]))+ (-5.9610877 * float(x[31]))+ (-3.7284186 * float(x[32]))+ (3.2533069 * float(x[33]))+ (6.3277016 * float(x[34]))+ (1.8689259 * float(x[35]))+ (3.3319266 * float(x[36]))+ (-2.9227443 * float(x[37]))+ (7.824919 * float(x[38]))+ (7.141488 * float(x[39]))+ (6.4085827 * float(x[40]))+ (17.517601 * float(x[41]))+ (4.9962697 * float(x[42]))+ (0.3770916 * float(x[43]))+ (-0.038646564 * float(x[44]))+ (7.971117 * float(x[45]))+ (12.439605 * float(x[46]))+ (23.988401 * float(x[47]))+ (10.560701 * float(x[48]))+ (10.125868 * float(x[49])))+ ((7.4234967 * float(x[50]))+ (9.211722 * float(x[51]))+ (-1.9572641 * float(x[52]))+ (7.7891607 * float(x[53]))+ (12.788817 * float(x[54]))+ (6.991055 * float(x[55]))+ (24.356873 * float(x[56]))+ (8.860472 * float(x[57]))+ (8.445887 * float(x[58]))+ (10.164468 * float(x[59]))+ (5.1831007 * float(x[60]))+ (13.013955 * float(x[61]))+ (19.942644 * float(x[62]))+ (4.4516973 * float(x[63]))+ (12.21623 * float(x[64]))+ (18.3426 * float(x[65]))+ (18.425203 * float(x[66]))+ (23.458506 * float(x[67]))+ (15.226349 * float(x[68]))+ (15.3923645 * float(x[69]))+ (23.145035 * float(x[70]))+ (24.912361 * float(x[71]))+ (17.769386 * float(x[72]))+ (4.1821866 * float(x[73]))+ (23.342693 * float(x[74]))+ (19.882591 * float(x[75]))+ (22.961931 * float(x[76]))+ (21.855835 * float(x[77]))+ (21.388098 * float(x[78]))+ (16.68307 * float(x[79]))+ (8.270732 * float(x[80]))+ (13.092088 * float(x[81]))+ (15.897936 * float(x[82]))+ (15.844478 * float(x[83]))+ (11.502991 * float(x[84]))+ (12.555131 * float(x[85]))+ (13.424633 * float(x[86]))+ (13.105268 * float(x[87]))+ (9.763638 * float(x[88]))+ (14.220205 * float(x[89]))+ (4.345673 * float(x[90]))+ (13.051479 * float(x[91]))+ (9.569001 * float(x[92]))+ (22.734428 * float(x[93]))+ (5.6336937 * float(x[94]))) + -10.93794), 0)
  h_4 = max((((3.493443 * float(x[0]))+ (7.662764 * float(x[1]))+ (6.341689 * float(x[2]))+ (6.125888 * float(x[3]))+ (7.4343452 * float(x[4]))+ (-2.759361 * float(x[5]))+ (-4.9060183 * float(x[6]))+ (-5.069411 * float(x[7]))+ (-6.4167995 * float(x[8]))+ (-4.4743686 * float(x[9]))+ (7.7286797 * float(x[10]))+ (7.4691787 * float(x[11]))+ (4.6550245 * float(x[12]))+ (9.572891 * float(x[13]))+ (12.778605 * float(x[14]))+ (-8.51767 * float(x[15]))+ (-8.668175 * float(x[16]))+ (-5.2629113 * float(x[17]))+ (-7.036288 * float(x[18]))+ (-4.696961 * float(x[19]))+ (3.7311776 * float(x[20]))+ (1.5789554 * float(x[21]))+ (2.121837 * float(x[22]))+ (2.7060928 * float(x[23]))+ (-0.300017 * float(x[24]))+ (-4.918509 * float(x[25]))+ (-3.992231 * float(x[26]))+ (-5.6356125 * float(x[27]))+ (-4.790619 * float(x[28]))+ (-8.355291 * float(x[29]))+ (-6.688287 * float(x[30]))+ (-3.6280677 * float(x[31]))+ (-4.869752 * float(x[32]))+ (-8.459162 * float(x[33]))+ (-7.0165553 * float(x[34]))+ (-4.2233233 * float(x[35]))+ (-2.788883 * float(x[36]))+ (-5.2941837 * float(x[37]))+ (0.493093 * float(x[38]))+ (0.52473646 * float(x[39]))+ (-3.1067107 * float(x[40]))+ (-0.62168586 * float(x[41]))+ (-1.0250309 * float(x[42]))+ (1.1422601 * float(x[43]))+ (-0.5696593 * float(x[44]))+ (-2.5013547 * float(x[45]))+ (0.46321002 * float(x[46]))+ (-1.4922489 * float(x[47]))+ (-5.75246 * float(x[48]))+ (-0.7964667 * float(x[49])))+ ((3.115948 * float(x[50]))+ (0.937403 * float(x[51]))+ (0.016662495 * float(x[52]))+ (3.194004 * float(x[53]))+ (-1.5408763 * float(x[54]))+ (-0.8131594 * float(x[55]))+ (-0.50195026 * float(x[56]))+ (3.1222265 * float(x[57]))+ (-2.9856668 * float(x[58]))+ (-3.3884187 * float(x[59]))+ (-5.117608 * float(x[60]))+ (-4.473764 * float(x[61]))+ (-1.8076857 * float(x[62]))+ (-3.227233 * float(x[63]))+ (-1.6922728 * float(x[64]))+ (-9.61538 * float(x[65]))+ (-10.141571 * float(x[66]))+ (-10.384138 * float(x[67]))+ (-9.418127 * float(x[68]))+ (-9.800115 * float(x[69]))+ (-6.2610774 * float(x[70]))+ (-10.348193 * float(x[71]))+ (-8.170953 * float(x[72]))+ (-11.660517 * float(x[73]))+ (-11.040794 * float(x[74]))+ (-7.85996 * float(x[75]))+ (-9.299748 * float(x[76]))+ (-8.825703 * float(x[77]))+ (-9.57516 * float(x[78]))+ (-10.038696 * float(x[79]))+ (-9.441559 * float(x[80]))+ (-8.839003 * float(x[81]))+ (-10.086299 * float(x[82]))+ (-10.612477 * float(x[83]))+ (-10.99823 * float(x[84]))+ (-5.749421 * float(x[85]))+ (-5.3662453 * float(x[86]))+ (-4.9297805 * float(x[87]))+ (-5.915767 * float(x[88]))+ (-3.2993186 * float(x[89]))+ (0.44051293 * float(x[90]))+ (-1.7058192 * float(x[91]))+ (0.3477866 * float(x[92]))+ (0.18330567 * float(x[93]))+ (0.5644457 * float(x[94]))) + -1.2195362), 0)
  h_5 = max((((0.79874265 * float(x[0]))+ (2.2079012 * float(x[1]))+ (2.213298 * float(x[2]))+ (2.8751316 * float(x[3]))+ (4.0645514 * float(x[4]))+ (-1.7191848 * float(x[5]))+ (-3.8747191 * float(x[6]))+ (-2.5019214 * float(x[7]))+ (-1.803199 * float(x[8]))+ (-1.6455305 * float(x[9]))+ (3.336287 * float(x[10]))+ (3.8230913 * float(x[11]))+ (2.818892 * float(x[12]))+ (4.753786 * float(x[13]))+ (5.8304605 * float(x[14]))+ (-3.7661452 * float(x[15]))+ (-2.9546204 * float(x[16]))+ (-1.5856088 * float(x[17]))+ (-2.981537 * float(x[18]))+ (-1.4968822 * float(x[19]))+ (1.3656818 * float(x[20]))+ (0.9682666 * float(x[21]))+ (1.3268559 * float(x[22]))+ (1.4545978 * float(x[23]))+ (0.7032904 * float(x[24]))+ (-1.6512967 * float(x[25]))+ (-1.431545 * float(x[26]))+ (-2.1032057 * float(x[27]))+ (-1.513254 * float(x[28]))+ (-2.2992473 * float(x[29]))+ (-2.6261096 * float(x[30]))+ (-2.1833062 * float(x[31]))+ (-2.60623 * float(x[32]))+ (-4.029053 * float(x[33]))+ (-1.5763686 * float(x[34]))+ (-1.3213454 * float(x[35]))+ (-0.30869377 * float(x[36]))+ (-1.4093506 * float(x[37]))+ (0.28517878 * float(x[38]))+ (-0.23190045 * float(x[39]))+ (-0.20782436 * float(x[40]))+ (0.09017314 * float(x[41]))+ (-0.87590057 * float(x[42]))+ (1.1002111 * float(x[43]))+ (-0.6974306 * float(x[44]))+ (-0.3203452 * float(x[45]))+ (-1.0189639 * float(x[46]))+ (-0.118555196 * float(x[47]))+ (-2.9945874 * float(x[48]))+ (-0.51089406 * float(x[49])))+ ((1.2112627 * float(x[50]))+ (-0.4235536 * float(x[51]))+ (-2.0615957 * float(x[52]))+ (0.30206862 * float(x[53]))+ (-0.28109217 * float(x[54]))+ (-1.9489948 * float(x[55]))+ (-0.453955 * float(x[56]))+ (-0.960889 * float(x[57]))+ (-3.2392933 * float(x[58]))+ (-2.2268083 * float(x[59]))+ (-1.146788 * float(x[60]))+ (-1.6525487 * float(x[61]))+ (-1.4226134 * float(x[62]))+ (-1.4616749 * float(x[63]))+ (-0.3914049 * float(x[64]))+ (-3.6084874 * float(x[65]))+ (-3.406137 * float(x[66]))+ (-4.2341323 * float(x[67]))+ (-3.768212 * float(x[68]))+ (-1.7592742 * float(x[69]))+ (-2.0872672 * float(x[70]))+ (-2.4289498 * float(x[71]))+ (-1.9885805 * float(x[72]))+ (-3.131457 * float(x[73]))+ (-2.4397752 * float(x[74]))+ (-2.3822887 * float(x[75]))+ (-1.9819697 * float(x[76]))+ (-2.9493754 * float(x[77]))+ (-1.7047992 * float(x[78]))+ (-2.682472 * float(x[79]))+ (-2.7290397 * float(x[80]))+ (-3.4213352 * float(x[81]))+ (-3.4495873 * float(x[82]))+ (-3.5336514 * float(x[83]))+ (-3.4438217 * float(x[84]))+ (-2.9247863 * float(x[85]))+ (-3.0342774 * float(x[86]))+ (-3.499241 * float(x[87]))+ (-3.3379247 * float(x[88]))+ (-3.039451 * float(x[89]))+ (0.12216999 * float(x[90]))+ (-1.9904226 * float(x[91]))+ (-0.6495586 * float(x[92]))+ (-2.1233308 * float(x[93]))+ (-1.9384086 * float(x[94]))) + -1.3233674), 0)
  h_6 = max((((0.5519132 * float(x[0]))+ (1.6824963 * float(x[1]))+ (2.0384593 * float(x[2]))+ (1.1979358 * float(x[3]))+ (1.7842789 * float(x[4]))+ (-0.25755593 * float(x[5]))+ (-1.0872153 * float(x[6]))+ (-0.6487719 * float(x[7]))+ (-0.9746207 * float(x[8]))+ (-1.5099661 * float(x[9]))+ (5.6911335 * float(x[10]))+ (5.447789 * float(x[11]))+ (4.5559464 * float(x[12]))+ (5.491214 * float(x[13]))+ (6.1173153 * float(x[14]))+ (0.5069985 * float(x[15]))+ (0.83266264 * float(x[16]))+ (-0.014746613 * float(x[17]))+ (-0.2723413 * float(x[18]))+ (-0.46708557 * float(x[19]))+ (2.5265963 * float(x[20]))+ (4.461178 * float(x[21]))+ (4.190406 * float(x[22]))+ (2.6789613 * float(x[23]))+ (2.0267453 * float(x[24]))+ (-2.5534048 * float(x[25]))+ (-1.7687631 * float(x[26]))+ (-2.457596 * float(x[27]))+ (-1.9076465 * float(x[28]))+ (-2.4512877 * float(x[29]))+ (-1.3361003 * float(x[30]))+ (-0.31355464 * float(x[31]))+ (0.4703773 * float(x[32]))+ (-0.32224676 * float(x[33]))+ (-0.9220165 * float(x[34]))+ (-2.0879362 * float(x[35]))+ (-0.9824092 * float(x[36]))+ (-0.9934337 * float(x[37]))+ (-0.12843674 * float(x[38]))+ (-0.6930861 * float(x[39]))+ (-2.1858432 * float(x[40]))+ (-1.0189759 * float(x[41]))+ (-0.56654626 * float(x[42]))+ (0.6777007 * float(x[43]))+ (-0.10168781 * float(x[44]))+ (-3.9948635 * float(x[45]))+ (-2.1589181 * float(x[46]))+ (-4.0752463 * float(x[47]))+ (-4.133647 * float(x[48]))+ (-2.5998497 * float(x[49])))+ ((-4.5801873 * float(x[50]))+ (-4.7083287 * float(x[51]))+ (-4.852537 * float(x[52]))+ (-4.1177263 * float(x[53]))+ (-4.0879602 * float(x[54]))+ (-6.7528305 * float(x[55]))+ (-7.2833776 * float(x[56]))+ (-4.305784 * float(x[57]))+ (-6.7335 * float(x[58]))+ (-6.5063214 * float(x[59]))+ (-3.7800198 * float(x[60]))+ (-2.71458 * float(x[61]))+ (-4.1819134 * float(x[62]))+ (-3.4050128 * float(x[63]))+ (-2.8409843 * float(x[64]))+ (-3.197699 * float(x[65]))+ (-2.1363096 * float(x[66]))+ (-1.3161597 * float(x[67]))+ (-3.73775 * float(x[68]))+ (-3.0636423 * float(x[69]))+ (1.6332918 * float(x[70]))+ (0.6360312 * float(x[71]))+ (-0.06610733 * float(x[72]))+ (0.6331638 * float(x[73]))+ (0.5010511 * float(x[74]))+ (-1.9502407 * float(x[75]))+ (-1.2095447 * float(x[76]))+ (-0.9375747 * float(x[77]))+ (-2.0015607 * float(x[78]))+ (-0.91119987 * float(x[79]))+ (-4.567264 * float(x[80]))+ (-3.3077307 * float(x[81]))+ (-3.789678 * float(x[82]))+ (-4.1172085 * float(x[83]))+ (-3.9126425 * float(x[84]))+ (-7.6979723 * float(x[85]))+ (-7.10813 * float(x[86]))+ (-6.5567074 * float(x[87]))+ (-7.8556542 * float(x[88]))+ (-6.879487 * float(x[89]))+ (-6.152117 * float(x[90]))+ (-6.0900135 * float(x[91]))+ (-5.2934766 * float(x[92]))+ (-4.5418577 * float(x[93]))+ (-5.721918 * float(x[94]))) + 1.0652502), 0)
  h_7 = max((((-0.007721077 * float(x[0]))+ (0.9745902 * float(x[1]))+ (1.9277453 * float(x[2]))+ (1.8385913 * float(x[3]))+ (3.2179878 * float(x[4]))+ (-0.97736806 * float(x[5]))+ (-3.3202877 * float(x[6]))+ (-1.2756655 * float(x[7]))+ (-0.2888348 * float(x[8]))+ (-1.5155303 * float(x[9]))+ (6.518345 * float(x[10]))+ (6.8968077 * float(x[11]))+ (6.033938 * float(x[12]))+ (7.0724 * float(x[13]))+ (7.5615335 * float(x[14]))+ (0.045959312 * float(x[15]))+ (1.3527313 * float(x[16]))+ (0.48994356 * float(x[17]))+ (-0.56280077 * float(x[18]))+ (-0.14299676 * float(x[19]))+ (2.6371903 * float(x[20]))+ (5.1990175 * float(x[21]))+ (5.068913 * float(x[22]))+ (3.3335752 * float(x[23]))+ (3.0834198 * float(x[24]))+ (-2.4724202 * float(x[25]))+ (-1.7780749 * float(x[26]))+ (-2.5580723 * float(x[27]))+ (-1.6813636 * float(x[28]))+ (-1.6110507 * float(x[29]))+ (-1.4726242 * float(x[30]))+ (-1.1941795 * float(x[31]))+ (-0.27878198 * float(x[32]))+ (-1.1684165 * float(x[33]))+ (0.25820303 * float(x[34]))+ (-1.9013294 * float(x[35]))+ (-0.2032577 * float(x[36]))+ (-0.35834983 * float(x[37]))+ (-0.03288136 * float(x[38]))+ (-1.2224069 * float(x[39]))+ (-1.2612153 * float(x[40]))+ (-0.73714876 * float(x[41]))+ (-1.1374002 * float(x[42]))+ (1.4519262 * float(x[43]))+ (-0.6281253 * float(x[44]))+ (-3.5937045 * float(x[45]))+ (-3.641139 * float(x[46]))+ (-3.886969 * float(x[47]))+ (-5.2901363 * float(x[48]))+ (-3.0275784 * float(x[49])))+ ((-4.9395275 * float(x[50]))+ (-5.94392 * float(x[51]))+ (-7.501714 * float(x[52]))+ (-5.471729 * float(x[53]))+ (-4.0646243 * float(x[54]))+ (-9.074182 * float(x[55]))+ (-8.137815 * float(x[56]))+ (-7.0316253 * float(x[57]))+ (-9.543442 * float(x[58]))+ (-8.019964 * float(x[59]))+ (-3.1531193 * float(x[60]))+ (-2.836113 * float(x[61]))+ (-5.300341 * float(x[62]))+ (-3.899354 * float(x[63]))+ (-2.7720459 * float(x[64]))+ (-3.3129992 * float(x[65]))+ (-1.7230226 * float(x[66]))+ (-1.6412921 * float(x[67]))+ (-4.160452 * float(x[68]))+ (-1.065857 * float(x[69]))+ (2.1442504 * float(x[70]))+ (2.4314337 * float(x[71]))+ (1.2269363 * float(x[72]))+ (2.2190723 * float(x[73]))+ (2.5720696 * float(x[74]))+ (-1.3646916 * float(x[75]))+ (0.48562554 * float(x[76]))+ (-0.48563552 * float(x[77]))+ (0.052593857 * float(x[78]))+ (0.351849 * float(x[79]))+ (-3.8961215 * float(x[80]))+ (-3.5524623 * float(x[81]))+ (-3.5704072 * float(x[82]))+ (-3.794198 * float(x[83]))+ (-3.3093944 * float(x[84]))+ (-9.062965 * float(x[85]))+ (-8.704963 * float(x[86]))+ (-8.808643 * float(x[87]))+ (-9.616969 * float(x[88]))+ (-9.343128 * float(x[89]))+ (-6.687765 * float(x[90]))+ (-8.023366 * float(x[91]))+ (-6.5682826 * float(x[92]))+ (-7.29952 * float(x[93]))+ (-8.537194 * float(x[94]))) + -1.7148888), 0)
  o[0] = (0.0003343347 * h_0)+ (-0.00041601618 * h_1)+ (-0.0034886077 * h_2)+ (-0.4704241 * h_3)+ (-2.8690464 * h_4)+ (7.3960524 * h_5)+ (7.2786236 * h_6)+ (-6.746218 * h_7) + -8.726858

  if num_output_logits == 1:
      return o[0] >= 0
  else:
      return argmax(o)


if __name__ == '__main__':

  sess = tf.Session()

  c = AudioClassifier(n_neurons=8, sess=sess, 
                     n_features=95, n_classes=2, 
                     name='feedforward')
  c.load_weights('./pretrained models/model.ckpt')
  
  mo_errors = 0
  co_errors = 0
  disagreement = 0

  n_instances = 10000  
  inputs = np.random.uniform(low=-100, high=100, size=(n_instances, 95))
  preds = c.get_prediction(inputs)

  for x, pred in zip(inputs, preds):
    co = 1 if classify(x) else 0
    mo = pred
    if mo != co:
      disagreement += 1
    if mo != 0:
      mo_errors += 1
    if co != 0:
      co_errors += 1
  
  print('Disagreement = ', disagreement/n_instances)
  print('TensorFlow Model Accuracy = ', 1-mo_errors/n_instances)
  print('Compiler Model Accuracy = ', 1-co_errors/n_instances)