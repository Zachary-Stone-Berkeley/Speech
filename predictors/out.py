#!/usr/bin/env python3
#
# This code is was produced by an alpha version of Brainome Daimensions(tm) and is
# licensed under GNU GPL v2.0 or higher. For details, please see:
# https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html
#
#
# Output of Brainome Daimensions(tm) 0.96 Table Compiler v0.96.
# Invocation: btc -v -v -f NN -o out.py hcoarse_small.csv
# Total compiler execution time: 1:02:15.64. Finished on: Jun-09-2020 18:48:43.
# This source code requires Python 3.
#
"""
Classifier Type: Neural Network
System Type:                        3-way classifier
Best-guess accuracy:                34.98%
Model accuracy:                     95.79% (122478/127860 correct)
Improvement over best guess:        60.81% (of possible 65.02%)
Model capacity (MEC):               372 bits
Generalization ratio:               329.24 bits/bit
Confusion Matrix:
 [33.51% 0.02% 0.16%]
 [0.01% 31.69% 1.49%]
 [0.30% 2.22% 30.59%]

"""

# Imports -- Python3 standard library
import sys
import math
import os
import argparse
import tempfile
import csv
import binascii
import faulthandler

# Imports -- external
try:
    import numpy as np # For numpy see: http://numpy.org
    from numpy import array
except:
    print("This predictor requires the Numpy library. For installation instructions please refer to: http://numpy.org")

# Magic constants follow
# I/O buffer for clean. Reduce this constant for low memory devices. 
IOBUF = 100000000

# Ugly workaround for large classifiers
sys.setrecursionlimit(1000000)

# Training file given to compiler
TRAINFILE = "hcoarse_small.csv"


#Number of output logits
num_output_logits = 3

#Number of attributes
num_attr = 114
n_classes = 3

mappings = []
list_of_cols_to_normalize = []

transform_true = True

def column_norm(column,mappings):
    listy = []
    for i,val in enumerate(column.reshape(-1)):
        if not (val in mappings):
            mappings[val] = int(max(mappings.values())) + 1
        listy.append(mappings[val])
    return np.array(listy)

def Normalize(data_arr):
    if list_of_cols_to_normalize:
        for i,mapping in zip(list_of_cols_to_normalize, mappings):
            if i >= data_arr.shape[1]:
                break
            col = data_arr[:, i]
            normcol = column_norm(col,mapping)
            data_arr[:, i] = normcol
        return data_arr
    else:
        return data_arr

def transform(X):
    mean = None
    components = None
    whiten = None
    explained_variance = None
    if (transform_true):
        mean = np.array([-69.48883487671412, -69.57187135388807, -69.60246415172836, -69.62217477663879, -69.55752261610793, 19.325892924276147, 19.37023440779232, 19.41000783503272, 19.467049840046283, 19.422575709634664, 18.21834246034929, 18.238331005460456, 18.177217672985762, 18.2059754213147, 18.205275112897407, -10.841461207848292, -10.794970937904157, -10.793685889516343, -10.826398574407689, -10.829994657037878, 5.089119961320208, 5.0791767702089805, 5.090601694410872, 5.113760429563985, 5.096290748498918, -9.557636006789696, -9.560428199031811, -9.601779949402484, -9.598221538092277, -9.527683691813992, 3.0832599080200693, 3.0634961501992253, 3.124406565487173, 3.106898332961566, 3.0764583570699764, -4.79566994592742, -4.8036227103652465, -4.8470019108354565, -4.831358206840277, -4.792088274713991, -1.9923586555447257, -2.0065884351286725, -2.0425760430863633, -2.0288364364887816, -2.048188724818959, -5.288177887299162, -5.280213402009105, -5.214992683300157, -5.27762419959576, -5.283633190612094, 3.0294872571216653, 3.004332359988924, 2.999356168802217, 3.0141800888129646, 3.0298638477932314, -7.4666981512685275, -7.488329925103837, -7.466368971888881, -7.453483948518349, -7.499663075406925, -3.4460041355276405, -3.424304188698534, -3.454729509958319, -3.4500081418578072, -3.40241824768535, -8.45497952944831, -8.487775598911146, -8.476497038021716, -8.475230508467531, -8.489835111127618, 2.605838933684555, 2.6201376267153407, 2.6230159351556877, 2.5975998591881604, 2.592396701231145, -5.918382926310288, -5.925823344274832, -5.914268951484007, -5.913081899559486, -5.924237638482109, -2.927541494728851, -2.9440371789465862, -2.9143549924548187, -2.906897612201477, -2.877546050700377, -7.615668864453356, -7.601506658493059, -7.634970533360411, -7.612593305134161, -7.638244970965101, -3.790999219139086, -3.777760597543981, -3.8077260423873835, -3.7952568032671317, -3.8392882997539206, 88.45038512249005, 15.140321925821178, 25.861163655666896, 6.926656108574269, 9.423626782703883, -4.546966536653894, 3.0387410043008187, -3.5856735617034388, 5.454627943846732, -5.630831457501871, 3.077553615023239, -7.910989128562651, -0.9389397397278368, -6.644916618378065, -0.9887000938925676, -7.043405897645906, 0.18877819236452656, -6.5942280916248, -0.5809899017193523])
        components = np.array([array([-3.88469502e-01, -3.97113599e-01, -4.01503600e-01, -3.98360271e-01,
       -3.90763263e-01,  1.42328210e-01,  1.45564255e-01,  1.46685685e-01,
        1.45404560e-01,  1.41887733e-01, -2.37507073e-02, -2.41175262e-02,
       -2.39609429e-02, -2.34772322e-02, -2.25196666e-02, -1.58686490e-02,
       -1.66528032e-02, -1.71926231e-02, -1.74915076e-02, -1.71110218e-02,
        1.93405611e-02,  2.02368471e-02,  2.04668714e-02,  2.01291750e-02,
        1.94270649e-02, -1.88323641e-02, -1.96708282e-02, -1.98074407e-02,
       -1.98052521e-02, -1.88949966e-02,  1.61265694e-02,  1.68500794e-02,
        1.67921929e-02,  1.67749136e-02,  1.62460340e-02, -4.43118204e-03,
       -4.66993170e-03, -4.62255320e-03, -5.02144983e-03, -4.50729542e-03,
       -1.08739795e-03, -7.90909383e-04, -8.17140867e-04, -6.36637036e-04,
       -1.03076996e-03,  9.95543593e-04,  5.48265694e-04,  6.44716463e-04,
        3.69687624e-04,  6.23015962e-04,  4.41746594e-03,  4.31241759e-03,
        4.80987296e-03,  5.10356779e-03,  4.68975890e-03, -5.18652286e-03,
       -5.09094636e-03, -5.26990216e-03, -5.44200615e-03, -5.46873018e-03,
        6.83217287e-03,  6.97506831e-03,  7.02190117e-03,  6.94014636e-03,
        6.81732128e-03, -1.48321056e-02, -1.51976642e-02, -1.54884284e-02,
       -1.51168488e-02, -1.48109715e-02,  1.40498007e-02,  1.44247050e-02,
        1.47143562e-02,  1.42927820e-02,  1.41373990e-02, -8.34715057e-03,
       -8.92192358e-03, -8.96804643e-03, -8.73004566e-03, -8.59066177e-03,
        4.60217719e-03,  5.36324551e-03,  5.16875548e-03,  5.14558706e-03,
        4.76014557e-03, -8.66751515e-03, -9.06340748e-03, -9.01060876e-03,
       -9.01114256e-03, -8.86795066e-03,  2.51468686e-03,  2.69164183e-03,
        2.74645437e-03,  2.83158377e-03,  2.47272613e-03, -3.10161355e-01,
        4.53977623e-02, -2.31243595e-02,  1.13961038e-03,  1.01791856e-02,
        4.48445960e-03,  2.56056514e-02,  5.26614832e-03,  1.58150283e-02,
        5.65522117e-03,  1.46509106e-02,  3.89687177e-03,  1.66189053e-02,
       -1.02049396e-03,  1.82906032e-02,  1.49217022e-03,  1.94334938e-02,
        2.84144236e-04,  1.75070338e-02]), array([-0.11696587, -0.11486617, -0.11098462, -0.10852311, -0.10743589,
       -0.20197937, -0.20776919, -0.21106261, -0.20984216, -0.20476118,
        0.17407095,  0.17897324,  0.18064349,  0.17939873,  0.17595021,
       -0.15480906, -0.15764037, -0.15801438, -0.15727767, -0.15483328,
        0.03230929,  0.03286723,  0.03246235,  0.03245965,  0.03223169,
       -0.08329713, -0.08405528, -0.08418694, -0.08346587, -0.08298689,
        0.00624381,  0.00554172,  0.00564847,  0.00528864,  0.00532639,
       -0.0480803 , -0.04799252, -0.04855599, -0.0480319 , -0.04758961,
        0.00825468,  0.00846206,  0.00838772,  0.00842608,  0.00827032,
       -0.05043492, -0.05132982, -0.05083236, -0.05142737, -0.05124741,
        0.02616914,  0.02678221,  0.02643791,  0.02625069,  0.02618084,
       -0.0429449 , -0.04269205, -0.04255256, -0.04224206, -0.04268852,
        0.00720869,  0.00659704,  0.00628237,  0.00574543,  0.00624754,
       -0.03259467, -0.03203251, -0.03197231, -0.0314568 , -0.0315307 ,
        0.01961691,  0.01888259,  0.01872191,  0.01856433,  0.01822262,
       -0.01758515, -0.01759579, -0.01728541, -0.01726249, -0.01688917,
        0.01517047,  0.0155129 ,  0.01538158,  0.01502561,  0.01491183,
       -0.02745091, -0.02780235, -0.02823736, -0.02772746, -0.02803247,
        0.01306449,  0.01297756,  0.01270539,  0.01243512,  0.01279476,
        0.17768487, -0.42010119,  0.07683545, -0.18664175, -0.05925315,
       -0.16675511, -0.06759661, -0.11865004, -0.03264638, -0.11500395,
       -0.02723343, -0.10391992, -0.04096245, -0.07722596, -0.04310906,
       -0.0806558 , -0.0300159 , -0.08673772, -0.03326598]), array([ 0.05468927,  0.05068948,  0.05216804,  0.05005249,  0.05180995,
        0.13317976,  0.1448127 ,  0.15171166,  0.14987359,  0.1400072 ,
       -0.09276063, -0.09863637, -0.10276453, -0.10066557, -0.09382333,
        0.00369392,  0.00624311,  0.00673696,  0.0066283 ,  0.00274471,
        0.00560543,  0.00575886,  0.00735295,  0.00537293,  0.00719731,
       -0.12884276, -0.13023334, -0.13329778, -0.13076026, -0.12765682,
        0.01598099,  0.01585236,  0.01604931,  0.01517578,  0.01275745,
       -0.10210011, -0.104214  , -0.1042508 , -0.10382143, -0.10119999,
        0.03969539,  0.04128576,  0.04031724,  0.04161215,  0.04087416,
       -0.09093792, -0.09258518, -0.09172185, -0.09191099, -0.09081651,
        0.04137139,  0.04181688,  0.04153945,  0.04152888,  0.04122443,
       -0.07138257, -0.07219724, -0.07349747, -0.07289514, -0.07123264,
        0.02169059,  0.02162318,  0.02241933,  0.02160913,  0.02107281,
       -0.04029805, -0.04042048, -0.0409634 , -0.0395484 , -0.03981338,
        0.02085179,  0.02076394,  0.02032518,  0.01957333,  0.02012591,
       -0.04334028, -0.04271934, -0.04394809, -0.04344536, -0.04376006,
        0.03390308,  0.03444856,  0.03409989,  0.03395433,  0.03453738,
       -0.03161578, -0.03321318, -0.03230526, -0.03282967, -0.03297307,
        0.02466671,  0.02482815,  0.02453782,  0.02459901,  0.02445618,
        0.11669657,  0.28550597, -0.10500078, -0.07240469, -0.10144151,
       -0.33180028, -0.17846068, -0.25389404, -0.08512128, -0.2162228 ,
       -0.07992404, -0.21658093, -0.1138048 , -0.17575111, -0.10419484,
       -0.17999005, -0.09542466, -0.17550987, -0.10966575]), array([-1.36012992e-01, -1.03231124e-01, -7.46961545e-02, -7.24225185e-02,
       -9.80867646e-02,  6.84721118e-02,  6.39895719e-02,  5.79746123e-02,
        5.62947148e-02,  6.20510544e-02, -2.79023496e-03, -7.38988123e-03,
       -8.99524108e-03, -7.83129400e-03, -6.64375681e-03, -5.73775683e-02,
       -5.59179750e-02, -5.54179659e-02, -5.43813675e-02, -5.47340088e-02,
        1.98241920e-03,  7.29442875e-04, -1.39577342e-03, -1.44891974e-03,
        1.57197654e-03,  1.88361216e-03,  3.61974227e-03,  7.20968212e-03,
        6.91471625e-03,  5.00664243e-03,  5.14595160e-03,  4.26363916e-03,
        2.08137799e-03,  2.47207856e-03,  2.31516175e-03, -2.26481154e-02,
       -2.46004707e-02, -2.41409856e-02, -2.38042340e-02, -2.23512036e-02,
       -3.33602764e-02, -3.22628099e-02, -3.33746130e-02, -3.20046702e-02,
       -3.20271411e-02,  1.51172199e-02,  1.49874723e-02,  1.56067326e-02,
        1.64869300e-02,  1.67624780e-02, -2.15233390e-02, -2.30614943e-02,
       -2.34833106e-02, -2.42537110e-02, -2.25699824e-02, -8.64558531e-03,
       -7.61225384e-03, -7.06300326e-03, -7.22580675e-03, -7.26819207e-03,
       -9.26988887e-03, -1.08931061e-02, -1.15727551e-02, -1.17348319e-02,
       -1.15722779e-02, -3.50569866e-02, -3.48011722e-02, -3.36132896e-02,
       -3.38328444e-02, -3.44335514e-02,  1.14809182e-02,  1.21133717e-02,
        1.01620718e-02,  1.02725226e-02,  1.12896976e-02, -8.69330442e-03,
       -9.26990457e-03, -7.89953359e-03, -8.07013165e-03, -8.98795669e-03,
       -2.13906358e-02, -2.26297008e-02, -2.35439206e-02, -2.31435842e-02,
       -2.25563707e-02, -1.71002234e-02, -1.70245188e-02, -1.73172029e-02,
       -1.70998959e-02, -1.62622518e-02, -1.45742844e-02, -1.51139131e-02,
       -1.59006663e-02, -1.55561599e-02, -1.51933719e-02,  8.60663110e-01,
        2.40053956e-01, -1.99747296e-03, -2.22006650e-02,  8.28636565e-02,
        1.66145176e-01,  1.14957067e-01,  3.47810868e-02,  3.56028101e-02,
        8.75479305e-02,  4.82073174e-02,  6.96957409e-02,  7.80620547e-02,
        5.00140640e-02,  7.41425217e-02,  5.35502980e-02,  4.82834167e-02,
        6.15338222e-02,  5.86867140e-02]), array([ 7.03605715e-02,  5.29632510e-02,  4.65468031e-02,  4.89177450e-02,
        6.69886644e-02,  5.30407489e-02,  6.32658456e-02,  7.12448311e-02,
        6.94000435e-02,  5.95641540e-02,  1.89613021e-01,  1.99755526e-01,
        2.02402648e-01,  1.98258123e-01,  1.86967185e-01, -9.97069793e-02,
       -1.05898907e-01, -1.05677392e-01, -1.04340018e-01, -9.80538901e-02,
        1.18560542e-01,  1.23349282e-01,  1.25530048e-01,  1.24586130e-01,
        1.17662567e-01, -4.15585194e-02, -4.25132339e-02, -4.26164483e-02,
       -4.31867411e-02, -3.98954695e-02,  1.03801533e-02,  1.18403115e-02,
        1.31113547e-02,  1.27993083e-02,  1.15916270e-02,  1.92070097e-02,
        2.14826038e-02,  2.17617102e-02,  2.15148445e-02,  2.03054575e-02,
       -3.42997894e-02, -3.73603242e-02, -3.94667407e-02, -3.95445405e-02,
       -3.57195434e-02,  1.18548458e-02,  1.32696730e-02,  1.44028854e-02,
        1.62357905e-02,  1.25527469e-02, -1.21623766e-02, -1.39194222e-02,
       -1.49572562e-02, -1.62210807e-02, -1.29991771e-02, -2.02605668e-02,
       -2.06531520e-02, -2.16430152e-02, -1.94869772e-02, -2.08848167e-02,
        1.68607517e-02,  1.77205862e-02,  1.93434100e-02,  1.89955311e-02,
        1.90690974e-02, -1.54492584e-02, -1.58534412e-02, -1.66863187e-02,
       -1.73182787e-02, -1.50908782e-02, -2.24283855e-03, -1.55943373e-03,
       -1.05025376e-03, -2.33882551e-05, -7.69735022e-04, -1.87710381e-02,
       -2.00156935e-02, -2.15328226e-02, -2.16878997e-02, -2.03779812e-02,
        9.17407542e-03,  9.73498029e-03,  1.01388296e-02,  1.05097384e-02,
        1.09351601e-02, -7.30147930e-03, -7.24366193e-03, -7.21982075e-03,
       -7.39981629e-03, -8.74642582e-03,  5.77970852e-03,  6.28419803e-03,
        6.94810719e-03,  7.30340684e-03,  8.04539549e-03, -1.65172627e-01,
        4.32627834e-01,  5.85288963e-01,  7.48489855e-02,  2.08041264e-01,
        6.43641062e-03,  6.06846754e-02,  4.30732103e-02, -2.79116050e-02,
        1.33340492e-02, -1.90605877e-03, -2.71650025e-02,  6.42149360e-03,
       -2.44508520e-02,  6.74541594e-04, -2.13733913e-02,  6.16283539e-03,
       -3.57509881e-02, -1.29060893e-02]), array([-1.20453392e-01, -9.12532616e-02, -5.32936417e-02, -2.82992714e-02,
       -2.98468476e-02, -2.48534544e-04, -1.43600460e-02, -2.78385401e-02,
       -3.41831614e-02, -2.88015866e-02,  8.65005571e-02,  9.56802172e-02,
        1.01520287e-01,  9.83680537e-02,  8.90375634e-02,  1.64033360e-01,
        1.78380100e-01,  1.88040893e-01,  1.85670622e-01,  1.76028674e-01,
       -2.03014540e-01, -2.19059857e-01, -2.29864569e-01, -2.27066847e-01,
       -2.14256645e-01,  6.15238345e-02,  6.57820411e-02,  7.16570207e-02,
        7.34417556e-02,  6.80527322e-02, -5.99402872e-02, -6.26077997e-02,
       -6.74509193e-02, -6.67148072e-02, -6.17573416e-02,  1.23227681e-02,
        1.39634588e-02,  1.51778592e-02,  1.46516455e-02,  1.22765039e-02,
       -5.53573320e-02, -5.84063282e-02, -6.17069131e-02, -6.00644550e-02,
       -5.86883752e-02, -4.48429337e-02, -4.87841726e-02, -4.80649752e-02,
       -4.68169893e-02, -4.43392335e-02,  3.18843076e-02,  3.50615830e-02,
        3.28264108e-02,  3.25581780e-02,  3.13306038e-02, -3.74587464e-02,
       -3.85708027e-02, -3.70131295e-02, -3.59911289e-02, -3.52058364e-02,
       -2.85211746e-03, -5.35367043e-03, -4.49262685e-03, -6.88351104e-03,
       -7.06904859e-03,  1.52923551e-03,  5.58624313e-03,  5.65614129e-03,
        6.13219366e-03,  7.61546752e-03, -1.20505633e-02, -1.57501705e-02,
       -1.70131983e-02, -1.72165973e-02, -1.73107558e-02, -3.05998489e-03,
       -1.06068509e-05,  1.13858195e-03,  1.51215659e-03, -3.06248509e-04,
        8.26798114e-03,  6.63854644e-03,  4.47974784e-03,  3.06349595e-03,
        5.18446755e-03, -3.04141682e-02, -3.21402253e-02, -3.13438259e-02,
       -2.99885553e-02, -3.02640676e-02,  2.88806889e-02,  3.06618547e-02,
        2.96808503e-02,  3.00446053e-02,  2.85462418e-02,  1.18395034e-01,
        2.03072432e-02,  3.56321331e-01,  3.79650470e-01, -2.84556583e-01,
       -5.18723925e-02, -9.94858579e-02, -4.41879939e-02, -1.57850581e-01,
       -1.22816917e-01, -5.12246894e-03, -6.60448434e-02, -2.90621736e-02,
       -3.00735483e-03, -2.63458266e-02, -1.04753157e-02, -1.26230952e-02,
       -5.15659276e-02,  1.86059510e-02]), array([ 5.29644268e-01,  3.27617711e-01, -5.51862200e-03, -3.49618119e-01,
       -5.47373508e-01, -2.29016415e-01, -1.43871785e-01, -9.97001522e-03,
        1.32215121e-01,  2.12358251e-01,  4.44382294e-02,  2.91539003e-02,
        7.91688783e-03, -1.32347989e-02, -2.21314157e-02,  7.11647090e-02,
        5.36440287e-02,  2.17733044e-02, -9.47388591e-03, -2.98421477e-02,
       -7.98240232e-02, -5.71879738e-02, -1.86290500e-02,  1.81439659e-02,
        3.62712251e-02,  5.04778059e-02,  3.16946490e-02, -3.46942113e-03,
       -3.60510698e-02, -5.33848488e-02, -3.06203679e-02, -1.40850763e-02,
        1.25570269e-02,  3.47880418e-02,  4.63063151e-02,  1.38801067e-03,
       -1.87373854e-03, -7.59243337e-03, -1.69487038e-02, -2.09622779e-02,
       -1.13586948e-02, -1.15649242e-02, -1.24267364e-02, -8.02675354e-03,
       -5.71255271e-03, -4.75623458e-03, -9.27811893e-04,  1.02148814e-03,
       -2.22803372e-03, -4.00137678e-03, -5.21572736e-03, -7.08273351e-03,
       -4.41793057e-03,  2.53091908e-05,  1.87859300e-03,  5.66277233e-03,
        3.26836221e-03, -4.89063379e-03, -1.12497416e-02, -1.28806172e-02,
       -2.30602249e-02, -1.54737534e-02, -1.85326297e-03,  1.09338358e-02,
        1.95123829e-02,  2.22600968e-02,  1.07739483e-02, -7.34650999e-03,
       -2.41763206e-02, -3.53933793e-02, -2.69627145e-02, -1.53950108e-02,
        2.87614975e-03,  2.07552563e-02,  3.18913294e-02,  1.56089593e-02,
        9.78265187e-03, -3.32509935e-03, -1.60507314e-02, -2.42125235e-02,
       -1.62600564e-02, -1.39176036e-02, -3.01674182e-03,  7.59698858e-03,
        1.60356927e-02,  4.63484788e-03,  2.46923947e-03, -4.03720182e-03,
       -1.25340205e-02, -1.80172753e-02, -8.87433662e-03, -4.00136827e-03,
        2.07232333e-03,  9.62195379e-03,  1.40294484e-02,  3.77083405e-02,
       -2.64517668e-03,  2.13578856e-02,  5.14273759e-02, -6.81791789e-03,
        6.47351156e-03,  3.51493757e-02, -8.10575998e-03, -1.02870673e-02,
       -6.24856300e-03, -1.42667679e-03, -4.93772180e-03,  2.10730843e-03,
       -1.15641082e-02,  6.51481469e-03, -1.03814027e-02, -2.88860395e-03,
       -7.61378847e-03,  1.22738405e-02]), array([ 4.57617640e-02,  2.91362290e-02,  7.33013133e-03, -7.45614584e-03,
       -1.24658203e-03,  4.29905568e-02,  5.32547231e-02,  6.63529498e-02,
        6.87686905e-02,  6.02825008e-02,  3.93509693e-02,  4.52439426e-02,
        4.74744245e-02,  4.23887085e-02,  3.54297542e-02, -1.43174811e-01,
       -1.63674780e-01, -1.75906353e-01, -1.68559659e-01, -1.51380828e-01,
       -1.12332644e-01, -1.14532197e-01, -1.17344824e-01, -1.12286326e-01,
       -1.05672454e-01,  1.83263567e-01,  1.95106550e-01,  2.02934583e-01,
        1.94768112e-01,  1.78896373e-01, -1.29351091e-01, -1.33189324e-01,
       -1.38401865e-01, -1.32238879e-01, -1.21811708e-01,  1.34675265e-02,
        1.31625515e-02,  1.27537357e-02,  8.73560629e-03,  7.04201742e-03,
        9.39546388e-04,  5.60063338e-04,  1.44634189e-03,  4.08013626e-03,
        3.03736903e-03,  1.56999186e-02,  1.62905438e-02,  1.66695058e-02,
        1.41515908e-02,  1.28434900e-02, -3.05859427e-02, -3.19614501e-02,
       -3.26372469e-02, -2.94817817e-02, -3.00515638e-02,  2.60977241e-02,
        2.67978235e-02,  2.55020436e-02,  2.48403373e-02,  2.49702727e-02,
       -1.13878899e-02, -1.09324218e-02, -8.94112432e-03, -8.03095381e-03,
       -9.99458082e-03,  6.08545556e-03,  4.56188991e-03,  1.86308982e-03,
        1.37452801e-03,  1.54223213e-03,  8.10614333e-03,  1.22390132e-02,
        1.35422838e-02,  1.18618455e-02,  1.26591211e-02,  5.90544256e-03,
        3.28893895e-03,  4.36981296e-03,  3.73550675e-03,  2.40549095e-03,
       -4.37163022e-03, -9.36909726e-04, -3.22058726e-03, -1.64830217e-03,
       -2.39628983e-04,  2.72680239e-02,  2.56590591e-02,  2.97762948e-02,
        2.66498322e-02,  2.73261406e-02, -7.58944063e-04,  9.80016839e-04,
       -3.83712294e-04,  7.50172584e-04, -1.75814127e-03, -8.23493946e-02,
        1.84304662e-01, -1.16327685e-02, -4.90997543e-01, -3.27788045e-01,
        2.00437332e-01, -1.70057660e-01, -1.07214058e-01, -7.12852669e-02,
       -2.97263757e-02, -8.71832420e-02, -2.01602977e-02, -7.61465379e-02,
       -5.54383718e-02, -1.50595281e-02, -7.90547270e-03, -2.51705660e-02,
        1.19523727e-02, -9.03422340e-03]), array([-0.01551579, -0.00463285, -0.00843379, -0.02303126, -0.04692038,
        0.0214231 ,  0.01744328,  0.02315423,  0.03056077,  0.04264647,
       -0.01844979, -0.01547436, -0.01757455, -0.01893961, -0.02218093,
       -0.01657596, -0.01851986, -0.0161143 , -0.01771849, -0.01397857,
        0.06051757,  0.06637089,  0.06748514,  0.06551868,  0.05810147,
       -0.09981556, -0.10735353, -0.11259975, -0.10579347, -0.09529189,
       -0.09678765, -0.10382813, -0.10893011, -0.10304848, -0.09796925,
        0.18055886,  0.19278628,  0.19989788,  0.19403034,  0.18136466,
       -0.18407999, -0.19825252, -0.20753256, -0.20021132, -0.18563398,
        0.09903163,  0.10620312,  0.11017035,  0.10854787,  0.09981287,
       -0.04858577, -0.05089231, -0.05275642, -0.05241252, -0.05000088,
        0.04284783,  0.04447842,  0.04269052,  0.04361075,  0.04329695,
       -0.04414916, -0.04322198, -0.04398353, -0.04439945, -0.04442912,
        0.0726481 ,  0.07359737,  0.07550483,  0.07096266,  0.06953769,
       -0.06813822, -0.07066007, -0.07098158, -0.06889021, -0.06432956,
        0.05577916,  0.05655035,  0.05836801,  0.05709012,  0.05260786,
       -0.02464784, -0.02465355, -0.02532518, -0.02531416, -0.02399832,
        0.02118486,  0.01988856,  0.01890858,  0.01958572,  0.01798832,
       -0.01173969, -0.01109975, -0.00900472, -0.01020519, -0.00941152,
        0.09949383, -0.02202699, -0.08463752, -0.03902193, -0.03714368,
       -0.31931963, -0.26864403,  0.15295163, -0.2830018 ,  0.01000734,
       -0.09730985,  0.00351081, -0.07555543,  0.06624113, -0.11154895,
        0.03080655, -0.03848079,  0.00472031, -0.030598  ]), array([-0.00474719,  0.00198071,  0.00405534, -0.00612583, -0.02241572,
        0.03589041,  0.02972146,  0.03493174,  0.04377037,  0.05564544,
        0.04535015,  0.05410701,  0.05357015,  0.04934129,  0.03922079,
       -0.02564452, -0.03284893, -0.03395767, -0.03078901, -0.02435852,
       -0.03208025, -0.03504547, -0.03925205, -0.03567566, -0.02912481,
       -0.05511096, -0.06124968, -0.06298234, -0.06087289, -0.05731441,
        0.06498893,  0.06851293,  0.06850325,  0.0655381 ,  0.06426267,
       -0.0558377 , -0.06043151, -0.06110607, -0.05906484, -0.05104868,
        0.11400813,  0.12509722,  0.12674584,  0.12216225,  0.1104099 ,
       -0.06624125, -0.07321086, -0.07325478, -0.07349707, -0.06362209,
        0.05683292,  0.06104646,  0.06218674,  0.06100016,  0.05529241,
        0.06337196,  0.06900322,  0.07035412,  0.06937409,  0.06604553,
       -0.14095127, -0.15200691, -0.15427152, -0.15354901, -0.14306658,
        0.19757414,  0.21339098,  0.2197171 ,  0.21643772,  0.19864161,
       -0.15400689, -0.16796037, -0.17313589, -0.16838629, -0.15514637,
        0.07380905,  0.07984444,  0.08299774,  0.08166241,  0.07451295,
       -0.01076714, -0.01132439, -0.01028339, -0.01001554, -0.01204904,
       -0.00787747, -0.01024775, -0.0111926 , -0.01050415, -0.00737205,
       -0.02183272, -0.01946132, -0.02024058, -0.01809207, -0.01857245,
        0.03428367,  0.07892141,  0.0829735 , -0.10051186, -0.18488018,
       -0.17116822,  0.03804783,  0.0212303 ,  0.18316322,  0.01818478,
        0.14192902,  0.11038994, -0.10228029,  0.27600048, -0.11859342,
        0.12541719,  0.05856308,  0.03811259, -0.00715674]), array([-1.16714211e-02,  3.79192484e-03,  7.12910780e-03, -1.59311970e-02,
       -5.53324519e-02,  5.53216404e-03, -2.72476193e-03,  7.99149703e-04,
        1.14796566e-02,  3.11758963e-02, -5.42822366e-03, -7.28525789e-03,
       -1.37100130e-02, -1.52054384e-02, -1.03310875e-02, -1.03273867e-02,
       -5.48101829e-03,  3.19155996e-05, -1.71500943e-03, -8.92084985e-03,
        8.03689171e-02,  8.54890040e-02,  9.01423631e-02,  8.94143557e-02,
        8.66587000e-02,  7.51325771e-02,  8.51548088e-02,  9.14164495e-02,
        8.59976632e-02,  7.47023566e-02, -1.88706496e-01, -2.10345491e-01,
       -2.20320465e-01, -2.09742731e-01, -1.87904471e-01,  1.00315980e-01,
        1.10922990e-01,  1.15794173e-01,  1.14247201e-01,  1.02806489e-01,
        7.73690925e-02,  8.31900945e-02,  8.88932546e-02,  8.27062422e-02,
        7.68554004e-02, -1.39176897e-01, -1.48440936e-01, -1.55094750e-01,
       -1.48021420e-01, -1.34555118e-01,  1.46767699e-01,  1.57788415e-01,
        1.65159492e-01,  1.58580734e-01,  1.44747871e-01, -9.05729781e-02,
       -9.89220689e-02, -1.03192058e-01, -1.00571638e-01, -9.03729469e-02,
        6.60159747e-03,  8.72720653e-03,  7.47969510e-03,  9.31294493e-03,
        9.10360368e-03,  1.66687029e-02,  1.64580964e-02,  1.86152236e-02,
        1.72344098e-02,  1.16947330e-02, -4.09471109e-02, -4.46852494e-02,
       -4.87567108e-02, -4.68983774e-02, -3.86398328e-02,  1.11929813e-02,
        1.35817756e-02,  1.38267128e-02,  1.49146437e-02,  1.14718003e-02,
        1.66082744e-04, -1.57970140e-03, -1.72417171e-03, -1.55420065e-03,
       -1.91844944e-03, -1.42874952e-02, -1.58472837e-02, -1.79693415e-02,
       -1.90621273e-02, -1.46304990e-02, -2.12729383e-02, -2.31341901e-02,
       -2.27491661e-02, -1.81907022e-02, -1.74776437e-02,  5.77588613e-02,
       -3.00783182e-02, -4.96802359e-02,  9.88828285e-02,  2.94223313e-01,
        1.09751825e-01, -3.03119829e-01,  1.45910627e-01,  2.10030821e-01,
       -8.79159101e-02,  1.89497592e-01, -8.03162890e-02, -6.79847354e-03,
        1.32403134e-02, -7.13019271e-02, -1.48662198e-02,  1.61873946e-03,
       -5.13126051e-02, -6.00858443e-02]), array([ 0.07661642,  0.02023076, -0.00784251,  0.00454512,  0.07722132,
       -0.0097738 ,  0.01596374,  0.02359032,  0.01685858, -0.0178878 ,
       -0.0121483 , -0.02091323, -0.02044268, -0.02201441, -0.01107155,
       -0.03531038, -0.04819895, -0.0618996 , -0.05186773, -0.04069213,
       -0.0576071 , -0.05668391, -0.05629319, -0.05700852, -0.05606581,
       -0.03870696, -0.04919365, -0.05571728, -0.0516181 , -0.0393321 ,
        0.05434782,  0.06363321,  0.06834004,  0.06469696,  0.05289573,
        0.06543333,  0.07200166,  0.07637561,  0.06777429,  0.06221551,
       -0.07525504, -0.08413087, -0.08707489, -0.08014505, -0.07315618,
       -0.00445776, -0.00171585, -0.00576665, -0.00279589, -0.00415719,
        0.15094968,  0.16376299,  0.17964092,  0.1667256 ,  0.15243888,
       -0.16593612, -0.18050263, -0.19233221, -0.18374485, -0.16785046,
        0.13636259,  0.15591178,  0.16559814,  0.15698249,  0.14225754,
       -0.0120576 , -0.01737657, -0.01761917, -0.01584838, -0.01479938,
       -0.0278702 , -0.02895855, -0.02863514, -0.02906464, -0.02705018,
        0.04318026,  0.05078153,  0.05342566,  0.04951352,  0.04630498,
       -0.00062915, -0.00530133, -0.00704767, -0.00583461, -0.00561698,
       -0.03266491, -0.03403329, -0.03146261, -0.02836686, -0.02815295,
        0.05983402,  0.06370904,  0.06446462,  0.06052985,  0.05424773,
       -0.06565031,  0.06107584, -0.05713057, -0.20007559, -0.23256589,
       -0.08964781,  0.21003431,  0.16542993, -0.08242433,  0.05890184,
        0.28434269, -0.08799876,  0.25832896,  0.11612578,  0.07386866,
        0.14170999,  0.08367245,  0.03686359,  0.15910222]), array([-0.0273784 , -0.00470505,  0.00715686,  0.01044879, -0.01115258,
       -0.00290131, -0.00846448, -0.00728058, -0.00790117,  0.00833132,
       -0.01172193, -0.01959256, -0.02904409, -0.02493885, -0.02791714,
       -0.00781305, -0.00259285,  0.00514619,  0.00483184,  0.00887767,
        0.04962908,  0.05657062,  0.06355702,  0.05510615,  0.05052841,
        0.06801943,  0.08661186,  0.10184769,  0.09222114,  0.07310124,
        0.02953441,  0.03660409,  0.03652428,  0.03535235,  0.03308022,
       -0.06938774, -0.08598545, -0.08962313, -0.08213592, -0.07287742,
       -0.07770876, -0.08963347, -0.09849673, -0.09039962, -0.08237288,
        0.04231827,  0.05295675,  0.05860671,  0.05698227,  0.05190382,
        0.00461703,  0.00484477,  0.00222781,  0.00159377, -0.0042192 ,
       -0.07459735, -0.08268163, -0.08968589, -0.08236777, -0.07297777,
       -0.03021788, -0.03371087, -0.03808898, -0.03015022, -0.02350594,
        0.10507538,  0.114785  ,  0.1205495 ,  0.11168876,  0.09770507,
       -0.12310668, -0.13579673, -0.14413027, -0.13411478, -0.12078146,
        0.05133663,  0.05846276,  0.06011   ,  0.05530479,  0.05039603,
        0.05232828,  0.05704466,  0.06024134,  0.05690335,  0.05199747,
       -0.11927615, -0.13320518, -0.14073129, -0.13451841, -0.11863606,
        0.11238279,  0.12353575,  0.12845307,  0.12151522,  0.11034236,
       -0.01385384, -0.06736966, -0.07699453,  0.0152101 ,  0.23409699,
        0.33170421,  0.10386998, -0.24885498, -0.28389181,  0.00654959,
       -0.04898509, -0.22270207, -0.11516388,  0.06038272, -0.19348427,
       -0.00307976, -0.00135087, -0.19742015,  0.08587865]), array([-0.05659609, -0.0003787 ,  0.02295211,  0.00826904, -0.05011482,
        0.02721984,  0.00701643,  0.0012654 ,  0.01579846,  0.04510549,
        0.02553994,  0.03228921,  0.03291519,  0.02618091,  0.01545796,
        0.01387241,  0.01748742,  0.02761085,  0.02224554,  0.02052897,
        0.01551611,  0.01288837,  0.00762928,  0.0137874 ,  0.01872868,
        0.0142214 ,  0.0217675 ,  0.02864484,  0.02558762,  0.01900508,
        0.04059119,  0.04256438,  0.04400871,  0.0401147 ,  0.03774779,
       -0.049477  , -0.05978832, -0.06567673, -0.05820696, -0.04800273,
        0.01189344,  0.01709022,  0.02062909,  0.01587505,  0.01067622,
        0.03013175,  0.02843847,  0.0272411 ,  0.03300582,  0.03393894,
       -0.00039954,  0.00200883,  0.00412202, -0.0036341 , -0.00297784,
       -0.07911873, -0.09022949, -0.09854608, -0.08688919, -0.0775926 ,
        0.07665454,  0.08365523,  0.08383629,  0.08091602,  0.0714155 ,
       -0.03041833, -0.03397923, -0.03471031, -0.03260827, -0.02835932,
       -0.07612716, -0.0859533 , -0.09321971, -0.08754456, -0.07910198,
        0.16009108,  0.17804623,  0.18793864,  0.17811443,  0.15939128,
       -0.2027071 , -0.22326589, -0.23858678, -0.22549867, -0.20101325,
        0.16598464,  0.18090576,  0.19354168,  0.18339899,  0.1653183 ,
       -0.10363663, -0.11141719, -0.12029266, -0.11386746, -0.10554593,
        0.01927988, -0.04031907,  0.03335844,  0.03788083,  0.0234804 ,
        0.04675687,  0.0174515 , -0.12463514, -0.00888111,  0.03656799,
       -0.07893585, -0.18279669, -0.01106099, -0.11247281, -0.14987429,
        0.12042796, -0.28165559,  0.10476982, -0.16447624]), array([-0.02542309, -0.01396599,  0.01016243,  0.00969271, -0.00701902,
        0.00074043,  0.00301281,  0.00118966,  0.00059494,  0.00341416,
        0.00309719, -0.00253664, -0.00774489, -0.016549  , -0.01948692,
       -0.00749919, -0.00413378, -0.00364508, -0.00072095, -0.00126325,
       -0.01939936, -0.02836062, -0.03585344, -0.03171738, -0.02112912,
        0.00589921,  0.0139244 ,  0.02270793,  0.01826152,  0.0166334 ,
        0.07768794,  0.0934832 ,  0.10643738,  0.09580197,  0.08033508,
        0.11168618,  0.13415035,  0.14800349,  0.13482491,  0.11549836,
       -0.02135119, -0.02818407, -0.02708333, -0.02458437, -0.02067974,
       -0.06394085, -0.06775123, -0.08051418, -0.07328466, -0.06591028,
        0.01317879,  0.01109287,  0.0153811 ,  0.01544711,  0.0181977 ,
       -0.00700749, -0.00782388, -0.00861782, -0.00561349, -0.00869191,
       -0.08386859, -0.09616665, -0.10390204, -0.09569844, -0.08441757,
       -0.01724213, -0.02081144, -0.02436955, -0.02124369, -0.01803006,
       -0.0124033 , -0.014391  , -0.01755417, -0.01357618, -0.00942037,
       -0.03236661, -0.03642652, -0.03922998, -0.03332842, -0.03224967,
       -0.0036122 , -0.00305269, -0.00735223, -0.00701691, -0.00371523,
        0.01097911,  0.00997276,  0.01510581,  0.01637735,  0.0138169 ,
       -0.00503168, -0.00319386, -0.00678557, -0.00574381, -0.00741914,
        0.03156313,  0.00495027, -0.03462636, -0.07626386, -0.0815349 ,
        0.13889696,  0.42527415,  0.45680994,  0.04173639, -0.15761333,
       -0.05513316, -0.12019219, -0.32061313, -0.2725481 , -0.2117047 ,
       -0.2086028 , -0.16142863, -0.11482931, -0.10938028]), array([ 3.95268266e-02, -9.26547572e-03, -1.99462518e-02, -8.03982629e-03,
        4.24002575e-02, -7.61542124e-03,  1.54047062e-02,  2.22528782e-02,
        1.60511105e-02, -1.37999515e-02,  3.54413654e-03, -1.13481305e-03,
       -7.24198619e-03, -6.10688670e-04,  4.84411313e-03,  9.70547554e-04,
       -8.67903186e-03, -1.24660866e-02, -1.46703637e-02,  9.64532088e-05,
        2.77078006e-02,  4.23968540e-02,  5.17523056e-02,  5.14777024e-02,
        3.37069007e-02,  5.92904867e-03,  6.39657183e-03,  8.10832239e-03,
        3.64782213e-03,  1.11889454e-02,  2.42398900e-02,  3.09173714e-02,
        3.64243480e-02,  3.13219498e-02,  2.07615223e-02, -7.79646999e-03,
       -1.21291646e-02, -1.71324680e-02, -1.32183894e-02, -1.39799306e-02,
       -7.41623103e-02, -8.96181167e-02, -9.88742691e-02, -9.03500084e-02,
       -7.35746177e-02, -1.37941740e-01, -1.57512811e-01, -1.75382842e-01,
       -1.60217434e-01, -1.38251306e-01,  7.91340278e-02,  9.32777389e-02,
        1.01530033e-01,  9.50705972e-02,  8.20284853e-02,  4.61390131e-02,
        5.22432217e-02,  5.94079737e-02,  5.41520705e-02,  4.37117103e-02,
       -5.52475106e-02, -5.73387990e-02, -6.47826633e-02, -6.48223582e-02,
       -5.80145566e-02,  4.06348426e-02,  3.92010092e-02,  4.69026653e-02,
        4.48311142e-02,  4.31106305e-02,  6.48166768e-02,  7.65324695e-02,
        8.41298090e-02,  7.25505921e-02,  5.93251963e-02, -1.82571618e-02,
       -1.85706844e-02, -2.22715077e-02, -2.02657152e-02, -1.49981782e-02,
       -3.65793384e-02, -4.81510273e-02, -4.46022703e-02, -4.30813287e-02,
       -3.94759719e-02,  8.72015716e-02,  1.03836969e-01,  1.07076696e-01,
        9.95286017e-02,  8.83912855e-02, -6.35854089e-02, -7.11430485e-02,
       -7.47894619e-02, -7.17158086e-02, -6.55695707e-02, -3.08770071e-02,
       -2.63014281e-03, -5.10194482e-02, -1.99709333e-02,  1.15048212e-01,
        1.30104966e-01,  1.09293306e-01, -1.42370016e-01, -4.50323888e-01,
       -4.72221085e-01,  5.67889032e-02,  1.54935530e-01, -4.48437739e-03,
        1.48213166e-01,  2.18366819e-01,  6.29943392e-02,  2.31138746e-02,
        1.99753911e-01,  5.29970599e-03]), array([-0.43910688,  0.24848069,  0.4743422 ,  0.22244645, -0.42698832,
        0.22827606, -0.06375165, -0.16199233, -0.05261338,  0.21547101,
       -0.02643739,  0.02064619,  0.03486832,  0.01704103, -0.01937043,
       -0.05062104,  0.02259159,  0.05533152,  0.00834022, -0.07212824,
        0.07221605, -0.02602423, -0.0707184 , -0.01278829,  0.09227339,
       -0.06033519,  0.02732914,  0.07186322,  0.02301259, -0.06000326,
        0.06307769,  0.00865951, -0.02157486,  0.01867668,  0.06598304,
       -0.00719526,  0.00455538,  0.01819174,  0.00305179, -0.00156396,
       -0.01501306, -0.01014616, -0.02476895, -0.01208651, -0.01807304,
        0.01979403,  0.01103604,  0.02866013,  0.02422911,  0.03539743,
        0.04173387,  0.04994809,  0.03571545,  0.03554264,  0.02697378,
       -0.03190008, -0.02595236, -0.01114729, -0.01864082, -0.02000794,
        0.0279964 , -0.00100422, -0.02152621,  0.00090928,  0.0247807 ,
       -0.01105126,  0.02887185,  0.04924229,  0.01815307, -0.01843537,
        0.05463077,  0.02092171,  0.00491363,  0.03377192,  0.06321695,
       -0.06431232, -0.04941705, -0.03810732, -0.05647413, -0.06799704,
        0.04866864,  0.04120266,  0.02664142,  0.04086511,  0.04939597,
        0.00937428,  0.01467463,  0.02902999,  0.01650138,  0.01185435,
       -0.02492326, -0.03503721, -0.04546628, -0.03199843, -0.02632188,
       -0.037914  , -0.05662114,  0.02446821, -0.0353445 , -0.05848125,
        0.00357145,  0.00930358, -0.02524872, -0.05419048,  0.04865395,
        0.08365771, -0.02141524, -0.02289745,  0.04796044,  0.0509654 ,
       -0.03392101,  0.06538868,  0.04714685, -0.0466115 ]), array([-0.11187912,  0.05527063,  0.11900114,  0.04374956, -0.09651737,
        0.03527251, -0.02562233, -0.0415017 , -0.00160371,  0.05403113,
       -0.00630795,  0.00293294, -0.00303759, -0.0149104 , -0.02175803,
       -0.03031844, -0.01068578,  0.00128518, -0.00373829, -0.01668974,
        0.02961394,  0.00653305, -0.00372969,  0.00970178,  0.0288177 ,
       -0.02592264, -0.00684903,  0.00740934, -0.0080983 , -0.01910637,
        0.00072658, -0.01505898, -0.02742681, -0.01162929, -0.0051344 ,
        0.01569751,  0.03185392,  0.04611072,  0.03470384,  0.02386536,
        0.0588874 ,  0.06301951,  0.0613034 ,  0.05906355,  0.05026864,
       -0.09631495, -0.11831637, -0.12846531, -0.11525521, -0.09473338,
       -0.09531598, -0.10948253, -0.12711704, -0.11335464, -0.09456414,
        0.06541352,  0.07655258,  0.08750784,  0.07895755,  0.06392913,
        0.085261  ,  0.09446205,  0.1021707 ,  0.09734112,  0.08704902,
       -0.03879727, -0.03303524, -0.02930946, -0.03971986, -0.03986918,
       -0.02877134, -0.04796577, -0.05669638, -0.04414308, -0.03444187,
        0.10574326,  0.12922341,  0.14697443,  0.129058  ,  0.11158135,
       -0.03748157, -0.04976793, -0.06000786, -0.04992457, -0.0406693 ,
       -0.08169568, -0.09288986, -0.09703037, -0.09694347, -0.0875055 ,
        0.11472278,  0.12561297,  0.1301697 ,  0.13071205,  0.12140376,
       -0.00383816,  0.02006079, -0.00095976, -0.02393869, -0.01071485,
        0.00138047,  0.05285681,  0.15715033,  0.04203103, -0.37067544,
       -0.3547324 ,  0.13581452,  0.29589159,  0.05111475,  0.03321546,
        0.20685853, -0.09878135, -0.19379524,  0.10842149]), array([-1.80171146e-02,  1.67459426e-02,  2.61577521e-02, -2.47145267e-03,
       -9.47562263e-03,  2.55346423e-02,  3.68680660e-03, -4.63098621e-03,
       -4.87970948e-04, -1.75184459e-03, -2.05095665e-04,  3.06682811e-03,
        3.66364071e-03,  4.19591288e-03,  8.09585286e-03, -2.86857625e-03,
       -4.01790720e-03, -1.04593703e-03, -7.71906435e-03, -1.56799208e-02,
       -5.54236130e-03, -9.09587541e-03, -1.37509329e-02, -7.98251451e-03,
       -3.89452950e-03, -1.08209835e-02, -3.78731160e-03,  3.66871842e-03,
       -1.50664231e-03, -8.34103610e-03, -5.26134592e-03, -5.47285801e-03,
       -1.21805655e-02, -5.53945830e-03, -4.78507869e-03, -1.97400373e-02,
       -2.15375437e-02, -2.55006651e-02, -2.78817616e-02, -1.83336062e-02,
       -3.00431513e-02, -3.47054617e-02, -3.73990437e-02, -3.04185316e-02,
       -2.65720553e-02,  1.25544497e-02,  1.24762188e-02,  7.68842240e-03,
        6.74968931e-03,  6.40492117e-03,  5.02946101e-02,  6.56052521e-02,
        8.56701992e-02,  7.24370942e-02,  6.07226190e-02,  9.40436703e-02,
        1.12121979e-01,  1.30664821e-01,  1.12827756e-01,  9.21661042e-02,
        1.09312035e-02,  1.38217226e-02,  1.58032046e-02,  1.13803863e-02,
        1.42174516e-02, -4.59575251e-02, -5.66508693e-02, -6.16012629e-02,
       -5.34716024e-02, -5.16296247e-02, -3.17908981e-02, -4.19112594e-02,
       -5.31592840e-02, -4.08788085e-02, -3.25905377e-02, -5.59097276e-03,
       -4.18094920e-04,  1.14742944e-03, -6.75373131e-04,  2.66830336e-03,
       -4.50844721e-02, -6.20663636e-02, -7.28124053e-02, -6.06048734e-02,
       -5.47601371e-02, -2.84484970e-02, -2.64539549e-02, -2.97719631e-02,
       -2.53376215e-02, -1.90045573e-02,  3.99930155e-02,  4.53086070e-02,
        4.67602922e-02,  4.38119846e-02,  3.89849068e-02, -1.69769810e-02,
       -4.26992690e-03,  8.21676266e-04, -1.17402351e-02,  6.32609927e-03,
        4.05684115e-02, -1.94002723e-02, -1.08308984e-01, -1.25175010e-01,
        9.92195168e-02,  4.07341656e-01,  5.16420893e-01,  2.05337577e-01,
       -1.49207478e-01, -2.63524620e-01, -2.73666058e-01, -3.48436423e-01,
       -2.19150276e-01, -2.43405305e-02]), array([-1.44788034e-01, -6.12876121e-02, -4.31385576e-03,  7.25292928e-02,
        1.22276714e-01, -3.31481781e-01, -2.21267529e-01, -1.15845965e-02,
        1.90607317e-01,  2.88130257e-01,  3.92766806e-01,  2.44566996e-01,
       -5.87220986e-03, -2.43142444e-01, -3.74033209e-01, -2.81556317e-01,
       -1.71943140e-01,  5.41887858e-03,  1.73710814e-01,  2.62762273e-01,
        8.85615886e-02,  5.30293034e-02, -6.18083979e-03, -5.47680565e-02,
       -7.65343830e-02, -1.26867865e-02, -1.04884220e-02, -3.06147903e-03,
        1.00600372e-02,  1.98761211e-02, -4.98194910e-02, -3.32671502e-02,
        4.49206472e-03,  3.82139962e-02,  4.91718571e-02,  6.38792794e-02,
        4.15371153e-02, -4.66444677e-03, -4.12897108e-02, -5.50519930e-02,
       -3.57020844e-02, -2.19330905e-02,  6.37028189e-03,  2.99480478e-02,
        3.80131029e-02,  1.46597326e-02,  1.37528547e-02,  4.63008669e-03,
       -5.64865893e-03,  2.93979567e-03,  1.79393063e-02,  8.54884027e-03,
        2.07916843e-03,  1.13168727e-03, -7.65740215e-03, -6.20206950e-03,
        5.98507374e-04,  5.47509754e-03,  2.53850660e-03,  4.50018995e-03,
       -5.09434602e-03, -6.97517609e-03,  2.57142904e-03,  3.83546893e-03,
        1.37038695e-02,  1.91747498e-02,  1.45102024e-02,  1.37687955e-04,
       -9.28791254e-03, -2.48980213e-02, -1.40093356e-02, -6.03816964e-03,
        1.09668642e-02,  1.66949530e-02,  3.02139772e-02,  1.88521197e-02,
        7.57520003e-03, -1.56058460e-02, -2.36816113e-02, -3.17911592e-02,
       -1.30849292e-02, -8.65818538e-03,  6.39279652e-03,  1.23036081e-02,
        1.54385140e-02,  1.49936824e-02,  1.18308879e-02,  5.52849309e-03,
       -2.82255056e-03, -2.71331523e-03, -1.80105734e-02, -1.22497328e-02,
       -3.56650763e-03,  8.06375849e-03,  9.49282653e-03, -1.40811565e-02,
        3.71252016e-02, -3.12368865e-02,  1.32133489e-02, -1.11481682e-02,
       -9.13803720e-03, -8.25257484e-03, -1.29089785e-02, -3.52746798e-03,
        1.17927306e-02,  1.60227279e-02,  1.12684523e-02,  1.11109034e-02,
        8.75930543e-03,  7.47772245e-03, -2.37903922e-02, -4.28778534e-03,
        1.23211348e-02,  1.42357966e-02]), array([-0.0417342 ,  0.02444862,  0.04650694,  0.02729278, -0.03088025,
       -0.00512252, -0.02426658, -0.0312511 , -0.01968091,  0.00400175,
       -0.01863018, -0.02366673, -0.01955488, -0.01827851, -0.01775354,
       -0.02045892, -0.00117355, -0.00249552, -0.0078923 , -0.02441004,
        0.01472731,  0.00252484,  0.00715256,  0.012426  ,  0.01957183,
       -0.03319206, -0.02602445, -0.03386363, -0.03208767, -0.03242673,
       -0.01198727, -0.02070681, -0.02246773, -0.01753667, -0.01497038,
       -0.00947516, -0.01333296, -0.01072825, -0.00823033, -0.00272983,
        0.01267823,  0.02110266,  0.01445627,  0.01096   ,  0.00466315,
       -0.01908692, -0.02884352, -0.01889849, -0.02344772, -0.0166938 ,
        0.02789169,  0.03634565,  0.03565104,  0.03185455,  0.02550932,
        0.02626802,  0.03576169,  0.04319326,  0.0345657 ,  0.02635061,
       -0.06181466, -0.0833663 , -0.09845872, -0.08251166, -0.05962543,
       -0.07961571, -0.08585941, -0.099814  , -0.09008567, -0.08546013,
        0.02021762,  0.0132181 ,  0.01519848,  0.01998252,  0.02587574,
        0.07670462,  0.09530505,  0.10772051,  0.09194641,  0.07328411,
       -0.0428746 , -0.05119525, -0.05438199, -0.05144272, -0.0450335 ,
        0.0095009 ,  0.01266138,  0.02077083,  0.0158477 ,  0.01731066,
        0.13335907,  0.1613156 ,  0.17629576,  0.15848144,  0.13108779,
       -0.02497302,  0.03581371,  0.02973426,  0.02935119,  0.03303234,
       -0.04836857, -0.07514128, -0.05596326, -0.00237931,  0.03411801,
        0.13098777,  0.02969796, -0.31824244, -0.39397036, -0.06241527,
        0.18836167,  0.12316651,  0.32847472,  0.51969636]), array([ 8.80757300e-03, -6.24102420e-03, -1.41464382e-02, -3.54926214e-03,
       -1.01532350e-02,  1.10274871e-02,  1.26926906e-02,  6.58635702e-03,
       -3.10547016e-03,  2.16661559e-03,  3.64368984e-03,  4.68701821e-03,
        1.32821986e-02,  1.48432948e-02,  9.98137956e-03,  6.92776303e-03,
        3.71936395e-04,  5.52193240e-04,  6.25591589e-03,  1.26028028e-02,
        8.89183353e-04,  5.83560592e-03,  2.76301806e-03, -5.85156521e-03,
       -7.95979488e-03,  8.09541506e-03,  2.72478502e-03,  4.65580419e-03,
        1.06924749e-02,  9.07724790e-03,  1.97204406e-03,  8.91081104e-03,
        7.21484706e-03,  3.03684423e-03,  3.30363536e-03,  1.05909508e-02,
        5.26078860e-03,  6.52768239e-04, -7.55644708e-03, -1.52582925e-02,
        3.16351340e-03,  8.27175913e-03,  1.59531953e-02,  2.64256673e-02,
        2.53125049e-02, -1.03597552e-02, -2.01811170e-02, -3.26445380e-02,
       -3.34688720e-02, -2.60586444e-02, -4.04292912e-02, -4.26111453e-02,
       -5.32321787e-02, -3.97328244e-02, -3.35787740e-02, -1.13806320e-02,
       -1.33954983e-02, -3.36812149e-03, -5.15351755e-03, -6.47086350e-03,
        8.01033100e-02,  1.00294477e-01,  1.13157678e-01,  9.36928522e-02,
        7.53276395e-02, -5.41286398e-03, -1.04004288e-03,  8.56082455e-04,
        4.11592630e-03,  3.57868170e-03, -9.90287897e-02, -1.24180845e-01,
       -1.57220006e-01, -1.36500582e-01, -1.06892074e-01, -4.38039457e-02,
       -5.57966398e-02, -6.38644328e-02, -5.17227209e-02, -4.31298946e-02,
        9.14514091e-02,  1.10138667e-01,  1.33834097e-01,  1.12765622e-01,
        9.17869768e-02,  5.51012675e-02,  7.13398478e-02,  7.87940589e-02,
        6.71864945e-02,  5.00011416e-02, -5.18279013e-02, -6.04717223e-02,
       -6.53741347e-02, -6.12434076e-02, -4.94067662e-02,  2.41123794e-02,
       -1.46380306e-02, -7.99466031e-03,  4.85493790e-03,  8.12787841e-03,
        1.54093430e-02,  2.28109779e-02, -4.57460435e-03, -3.89542319e-02,
       -1.48262678e-01, -1.40943785e-01,  8.54679129e-02,  2.67800236e-01,
       -9.29984710e-02, -5.09681020e-01, -2.56142658e-01,  3.24184047e-01,
        4.13551183e-01,  1.16569353e-01]), array([ 3.00704280e-03, -2.85178927e-02, -1.40430651e-02,  5.58410261e-02,
       -4.51630418e-02, -1.98146931e-02,  4.68544699e-03, -8.03494423e-03,
       -4.20120585e-02, -7.31136287e-03, -1.41576165e-02, -1.91691278e-02,
       -3.96054258e-03,  7.93701422e-05, -7.81176640e-04,  1.11007514e-03,
       -2.49629608e-04, -1.40763088e-02, -7.10169863e-03, -2.68009515e-02,
       -1.40457288e-02, -4.07561550e-03,  7.06369798e-04, -1.24717649e-02,
        1.49794821e-02, -2.93953155e-03, -1.17718206e-02, -9.04948085e-03,
        8.94903926e-03, -1.86710323e-02, -1.52902199e-02, -1.12205989e-02,
       -2.06088199e-02, -2.30082511e-02, -2.92119822e-03, -1.66551297e-03,
       -3.64132801e-03,  4.97089571e-03,  9.49027729e-04,  1.54974355e-03,
        1.66781157e-02,  2.30770717e-02,  2.88031648e-02,  1.86705033e-02,
        4.63991365e-03,  4.41539092e-03,  2.06650250e-03,  5.64705431e-04,
        3.75213121e-03,  1.37447171e-02, -1.28226117e-02, -1.07608572e-02,
       -2.21003363e-02, -1.62053340e-02, -1.80502727e-02, -3.59355795e-02,
       -5.36417421e-02, -5.41004983e-02, -4.61418538e-02, -3.93309855e-02,
       -2.13470301e-02, -2.09016789e-02, -2.26452063e-02, -2.86795435e-02,
       -1.50825706e-02,  6.77572878e-02,  8.84338588e-02,  1.05849783e-01,
        9.07014097e-02,  6.70710889e-02,  3.25960604e-02,  3.53205838e-02,
        4.03994699e-02,  3.51153393e-02,  3.10284134e-02, -6.99896571e-02,
       -9.24113772e-02, -1.09452389e-01, -9.15616740e-02, -7.38189819e-02,
       -7.12118812e-02, -9.21806883e-02, -1.07635871e-01, -9.52025613e-02,
       -6.95520417e-02,  5.75871617e-02,  7.55197828e-02,  8.27007964e-02,
        7.63633903e-02,  6.07288839e-02,  8.45838234e-02,  1.02479010e-01,
        1.20246082e-01,  1.02693034e-01,  8.12305323e-02, -4.60115774e-03,
        2.85667788e-02,  7.62574758e-03,  1.05279111e-02,  1.96766856e-02,
       -1.43583659e-02, -2.89441040e-02,  4.30423877e-02,  9.63853071e-02,
        1.29417965e-02, -1.28067288e-01, -1.50984632e-01,  8.66828329e-02,
        3.37867089e-01,  6.12465676e-02, -4.45754644e-01, -4.19366784e-01,
        1.67221918e-01,  4.40699604e-01]), array([-3.16719647e-01,  4.99247065e-01,  9.38067195e-03, -5.33054078e-01,
        3.24868808e-01,  1.24691253e-01, -1.99521586e-01,  2.02054897e-03,
        2.03382013e-01, -1.62199912e-01, -4.05853296e-03, -1.49628552e-03,
       -1.41955512e-02, -7.41744464e-03,  3.33575994e-02, -6.11399630e-02,
        1.06717517e-01,  1.15767478e-02, -1.07730572e-01,  5.11319963e-02,
        7.27732005e-02, -1.23924640e-01, -7.23157773e-03,  1.24738222e-01,
       -8.95673450e-02, -5.79888256e-02,  9.51261258e-02,  1.87726759e-03,
       -1.11280095e-01,  6.80309588e-02,  1.33909142e-02, -6.68029492e-02,
        2.12279198e-03,  7.00064442e-02, -4.66833898e-02,  1.87913574e-02,
        1.46314747e-02, -6.39588086e-03, -2.44887282e-02,  3.63411716e-03,
       -2.33096841e-02,  7.14507252e-03,  5.13945978e-03, -1.74702144e-03,
        1.56695197e-02,  1.87952646e-02, -1.59270362e-02,  3.61731412e-03,
        1.70374910e-02, -2.78130815e-02, -2.87347127e-03,  9.97944824e-04,
       -1.15598100e-02, -1.59864585e-02,  1.18416257e-02, -1.33540569e-02,
       -8.55510247e-04, -3.26388615e-03, -9.50654251e-03, -7.52307697e-03,
        1.31174799e-02, -3.15566694e-02, -6.46394845e-03,  2.01426858e-02,
       -2.66147662e-02, -1.41636127e-02,  3.89214826e-02,  8.24769275e-03,
       -1.88140062e-02,  3.18342647e-02,  1.88694566e-02, -3.20568293e-02,
        2.54931785e-03,  2.92300338e-02, -2.12113783e-02, -1.61015174e-02,
        1.09143874e-02, -9.17035567e-03, -2.47488755e-02,  1.88946135e-03,
       -2.72509648e-03, -1.92441546e-02, -1.10966958e-02,  8.45707847e-03,
       -7.48270244e-03,  1.21583841e-02,  1.07197961e-02,  6.30447038e-03,
        5.84433588e-03,  2.44234233e-03, -1.28115234e-04,  2.08638951e-04,
        1.02214421e-02,  4.14005962e-03, -4.15163357e-03,  3.40348155e-03,
        1.42995600e-02, -1.00229316e-02,  9.52312276e-03,  1.39449377e-02,
       -2.50283077e-03,  6.76060937e-03, -1.86599389e-03,  1.61622353e-02,
        3.00691954e-03, -1.84470486e-02, -2.44581264e-02,  1.10255224e-03,
        2.56297187e-02, -4.22150337e-03, -4.11981315e-02, -2.57291946e-02,
        1.62705744e-02,  3.39075352e-02]), array([ 1.27436565e-01, -4.50641960e-01,  6.11877400e-01, -4.08636786e-01,
        1.26210329e-01, -5.33224750e-02,  1.77755468e-01, -2.42144382e-01,
        1.73154013e-01, -3.06423077e-02,  5.51262192e-03,  8.73052837e-04,
        4.86329582e-03, -8.10137715e-03, -2.89826785e-03,  1.63266576e-02,
       -7.51812345e-02,  1.20684873e-01, -7.51537346e-02,  7.40225873e-03,
       -1.59438842e-02,  7.82744469e-02, -1.32382269e-01,  8.66560535e-02,
       -3.09675363e-04,  1.13217851e-02, -5.35561229e-02,  1.04408287e-01,
       -5.94909139e-02, -6.32824987e-03,  6.58496071e-03,  1.68611280e-02,
       -5.58377625e-02,  2.77458627e-02,  1.52223189e-02, -1.68123335e-02,
        1.21961721e-02,  2.89722404e-03,  1.18858097e-02, -1.48331890e-02,
        2.70904460e-02, -2.29178959e-02,  3.08793987e-02, -3.16689276e-02,
        1.42587302e-02, -1.89484536e-02,  3.27757532e-02, -3.47104797e-02,
        4.60943865e-02,  1.14316770e-03,  2.06856019e-02, -1.68446080e-02,
        2.61452387e-02, -3.26537252e-02,  2.53810095e-03, -1.08495247e-02,
        9.03570157e-03, -1.13076809e-02,  1.48248650e-02, -9.94468394e-03,
        1.11632622e-03,  2.04658075e-03, -2.12514070e-02,  4.19445282e-03,
        1.50502852e-02, -4.85503074e-04, -3.00417584e-03,  3.37216495e-02,
       -5.20177400e-03, -1.29398443e-02,  3.49278646e-03,  1.06010553e-02,
       -3.32786533e-02,  1.35674525e-02,  1.30409233e-02, -9.95946587e-03,
       -7.39687950e-04,  6.92680468e-03, -6.89597263e-03, -1.52343360e-02,
        7.47140123e-03, -1.16508505e-02, -9.86355018e-04, -5.70014513e-03,
        1.24579919e-02, -8.59281950e-03,  2.16647079e-02, -1.11826085e-02,
        1.86908869e-02, -7.48100546e-03,  1.25938764e-02, -1.00497946e-02,
        1.61755857e-02, -1.09243113e-02,  6.88990486e-03,  1.55224198e-03,
       -1.33933345e-02,  2.69432151e-03,  6.47106643e-03, -8.82998878e-03,
        6.57617492e-03, -1.15223786e-02,  2.02855672e-03,  5.47480655e-04,
        5.42452896e-03, -5.00546834e-03, -1.13887666e-02, -1.56363211e-03,
        1.14354611e-02, -1.43176378e-03, -1.16582274e-02, -6.80085441e-03,
        1.41154192e-02,  1.54607288e-02]), array([-1.21858849e-01, -6.38490209e-02, -4.12414895e-02,  8.55053729e-02,
        1.37584975e-01, -1.05708395e-01, -8.16912049e-02,  5.54179407e-03,
        7.88155180e-02,  1.06606645e-01,  3.07721541e-02,  4.19263518e-02,
        2.51785359e-02, -2.46891597e-02, -5.27798448e-02,  1.64417813e-01,
        9.38257595e-02, -2.36646828e-02, -9.04789828e-02, -1.02726683e-01,
       -2.88280237e-01, -1.85842779e-01,  1.56958593e-02,  1.91965538e-01,
        2.57760590e-01,  2.17159613e-01,  1.49419834e-01, -2.31681986e-03,
       -1.45868622e-01, -2.04923108e-01, -8.07365546e-02, -6.19185182e-02,
       -4.49249088e-03,  6.23932831e-02,  9.87000424e-02, -8.97232661e-02,
       -5.28412597e-02,  1.32767190e-02,  6.24873262e-02,  7.78220523e-02,
        2.10808300e-01,  1.43537028e-01, -5.80854975e-03, -1.41234365e-01,
       -1.92567260e-01, -2.30527088e-01, -1.55699906e-01,  1.57128625e-03,
        1.59154078e-01,  2.28385586e-01,  1.75713958e-01,  1.18037320e-01,
        4.67740644e-03, -1.21243493e-01, -1.70453788e-01, -4.41698571e-02,
       -3.28946064e-02, -2.48784782e-04,  4.23922946e-02,  5.67712583e-02,
       -5.23007082e-02, -2.76137675e-02,  1.06606747e-02,  4.11878055e-02,
        5.48784977e-02,  1.08542466e-01,  6.67592054e-02, -5.58488121e-03,
       -7.79680743e-02, -1.02311740e-01, -9.44384962e-02, -6.41431158e-02,
       -8.25422809e-04,  5.91508911e-02,  7.98398898e-02,  4.61056042e-02,
        2.69222577e-02, -7.61523271e-03, -3.75107560e-02, -4.67588539e-02,
        1.12399460e-02,  1.36012209e-02,  8.87002795e-03, -3.47572661e-03,
       -1.26703830e-02, -4.63348697e-02, -3.35988230e-02,  2.46680110e-03,
        2.75015548e-02,  4.51132466e-02,  3.22320813e-02,  2.28397071e-02,
       -9.69662553e-03, -3.36717146e-02, -4.12959976e-02,  1.28925801e-03,
       -1.39480374e-03, -4.35154075e-03, -1.85753325e-02,  9.85258014e-03,
       -7.96250442e-03, -2.34309762e-03,  4.95849702e-03, -7.50706158e-03,
       -2.59404438e-03, -4.67229760e-03,  9.65840938e-03,  1.35787905e-02,
       -7.77818630e-03, -1.70145251e-02, -7.41117273e-03,  1.21921744e-02,
        5.26569530e-03, -8.98051048e-03]), array([ 0.0041285 ,  0.03301853,  0.00982006, -0.02999531, -0.02590101,
       -0.06758928, -0.02784513,  0.01742687,  0.03193555, -0.00323401,
        0.03477383, -0.01261679, -0.03891589, -0.00853387,  0.03938586,
       -0.08285589, -0.01975105,  0.03012434,  0.02585464,  0.0143015 ,
        0.11511692,  0.0581914 , -0.01783521, -0.07301095, -0.09796601,
       -0.20395774, -0.13855612, -0.00055116,  0.13967265,  0.20308297,
        0.25195377,  0.17725468,  0.01558366, -0.18524263, -0.26087418,
       -0.26551807, -0.19294745, -0.02325419,  0.1935423 ,  0.28129646,
        0.19397263,  0.14506984,  0.01301757, -0.13851755, -0.21664349,
       -0.06569722, -0.05621455, -0.00729464,  0.04553769,  0.09011286,
       -0.05073165, -0.03711392, -0.00106901,  0.03969316,  0.03867979,
        0.13295186,  0.10666301,  0.0021297 , -0.10651863, -0.14295506,
       -0.16640094, -0.13461155, -0.00699333,  0.13078616,  0.18437734,
        0.13560043,  0.1158428 ,  0.00520892, -0.10795983, -0.14894921,
       -0.07514972, -0.06764944,  0.00231404,  0.06082317,  0.07598506,
        0.02061807,  0.0084996 , -0.01137374, -0.02234125, -0.00941725,
        0.01327843,  0.02430841,  0.0100874 , -0.00992386, -0.03124095,
       -0.01754918, -0.02343439,  0.00049278,  0.02231703,  0.03690838,
       -0.0013709 ,  0.00141263, -0.00548426, -0.01105781, -0.00876334,
       -0.00701719,  0.02408054, -0.02168619,  0.01834841, -0.01006539,
        0.00382753,  0.00169396, -0.00422492, -0.00150195, -0.00403776,
        0.00359487,  0.00316871,  0.00883322,  0.00356697, -0.0073646 ,
       -0.013914  ,  0.01046361,  0.01095685, -0.00531153]), array([-6.99288293e-02, -1.35514381e-02,  5.00008555e-02,  3.83100292e-02,
       -8.53412898e-02, -2.57684388e-01,  1.50558597e-02,  1.33634462e-01,
       -3.30431825e-03, -2.67001074e-01,  2.72399687e-01, -1.14186899e-01,
       -2.95031881e-01, -1.04609917e-01,  3.15570773e-01, -2.42820455e-01,
        8.78535841e-02,  2.41642445e-01,  7.57247224e-02, -3.14925291e-01,
        9.36522366e-02, -7.69944651e-02, -1.51193075e-01, -4.67851488e-02,
        1.66277536e-01,  2.18933492e-03,  2.21134822e-02,  2.75268228e-02,
       -1.16227332e-02, -6.44050706e-02, -1.02738520e-01,  2.99612398e-04,
        5.29596814e-02,  4.00439355e-02, -4.63862156e-02,  1.45701326e-01,
       -2.04260349e-02, -1.09409774e-01, -5.68531850e-02,  9.73668705e-02,
       -1.33849367e-01,  2.67205525e-02,  1.08543813e-01,  4.86132355e-02,
       -1.03756217e-01,  7.88222761e-02, -2.42508615e-02, -8.16192498e-02,
       -2.03495357e-02,  9.67304649e-02, -5.89913724e-03,  1.22363686e-02,
        3.38255974e-02, -8.65843711e-03, -5.39873355e-02, -3.93591834e-02,
       -1.15717123e-02,  2.18269991e-03,  3.02078034e-02,  2.44982623e-02,
        6.24826537e-02,  9.77640083e-03, -2.82652809e-02, -3.51576476e-02,
        1.61535188e-02, -3.77783775e-02,  4.67464159e-03,  3.87603171e-02,
        3.56798738e-02, -1.33398175e-02,  6.40104121e-03, -9.42676840e-03,
       -1.85719569e-02, -1.66677038e-02,  9.28312005e-03,  3.93616167e-02,
        1.29371421e-02, -8.18126024e-03, -1.36480486e-03,  2.33018158e-02,
       -3.70057835e-02,  1.18949891e-02,  4.03212051e-02,  2.39282425e-02,
       -3.19163387e-02,  3.98167758e-02, -5.38240292e-03, -3.11437815e-02,
       -8.19521328e-03,  5.79210546e-02, -2.79045237e-02,  2.18466211e-03,
        1.91597793e-02, -1.45314510e-03, -4.20970811e-02, -4.12692870e-02,
        1.91954310e-01, -1.34421888e-01,  1.04180061e-01, -4.01887569e-02,
        2.24870626e-03,  2.17713622e-02, -4.03738672e-02,  2.86396692e-02,
       -2.61491300e-02,  6.23266449e-03,  4.43664218e-03, -1.03132317e-02,
        1.43609470e-02, -1.31533428e-02, -7.53075266e-03,  2.18082766e-02,
       -2.00252294e-02, -2.69130253e-02]), array([-7.73517569e-02, -3.76780802e-02,  1.95914211e-02,  3.39334834e-02,
        2.83200583e-02, -1.06243607e-01, -7.79277567e-02, -5.64329066e-03,
        3.30882541e-03,  5.67572466e-02,  7.07670787e-02,  2.64147319e-02,
       -4.92612533e-02, -1.60914790e-02, -7.53977073e-02,  4.31101534e-02,
        4.00147955e-02,  3.69251441e-02, -8.05557815e-02, -7.43291844e-02,
       -1.75704535e-01, -1.20594667e-01, -1.92972674e-02,  1.29603098e-01,
        1.56586663e-01,  1.58074953e-01,  8.62692673e-02, -2.09025305e-02,
       -1.00834576e-01, -1.29011870e-01, -1.21252778e-02, -8.24903081e-03,
        2.75997835e-02, -1.80292754e-02, -1.64452853e-02, -8.19764277e-02,
       -2.25785197e-02, -2.18341184e-02,  6.27149424e-02,  4.71910226e-02,
        3.73386734e-02, -1.89318946e-02, -1.27815884e-02, -3.01675370e-02,
        3.15833483e-02,  1.07757629e-01,  1.03057442e-01,  2.63599121e-02,
       -7.23391264e-02, -1.70253652e-01, -2.22979038e-01, -1.54616767e-01,
       -2.32993729e-02,  1.53731848e-01,  2.55977771e-01,  2.39659033e-01,
        1.45991879e-01, -1.10449039e-03, -1.64063088e-01, -2.14964861e-01,
       -1.27767788e-01, -5.83819516e-02,  1.70901140e-02,  8.25909320e-02,
        7.13649780e-02, -5.05977551e-02, -4.78370713e-02, -9.61749580e-03,
        4.20896474e-02,  1.03480728e-01,  1.95384227e-01,  1.28462506e-01,
        7.28220911e-03, -1.31585525e-01, -2.03435114e-01, -2.22206506e-01,
       -1.42996971e-01, -3.76919799e-03,  1.61465703e-01,  2.15467289e-01,
        1.65460469e-01,  1.14326928e-01,  7.45153542e-03, -1.24489158e-01,
       -1.41727011e-01, -6.14956073e-02, -4.95968248e-02,  8.14863944e-04,
        6.81492026e-02,  6.00607084e-02,  1.29920492e-03,  1.02402135e-02,
       -1.23943370e-03, -1.55467120e-02, -2.46275386e-03, -1.10637681e-02,
        5.23969599e-02, -1.05657799e-02,  1.38508373e-02,  1.03764315e-02,
       -4.83138737e-03,  2.94581358e-03,  7.96944930e-04, -1.37355486e-02,
        1.67040477e-02, -8.26531900e-03, -1.06629899e-02,  1.01243079e-02,
       -7.89338511e-03, -2.16760170e-03,  1.52224950e-04,  1.26911968e-03,
        4.41536269e-03, -1.04475944e-02]), array([ 0.15706938, -0.01330038, -0.15637954, -0.01857745,  0.16149953,
        0.16086256,  0.07131309,  0.00357172,  0.01462525,  0.2081727 ,
       -0.03736662,  0.01604177,  0.10611792,  0.12207651, -0.1326496 ,
       -0.05955907,  0.06211734,  0.04768288, -0.04740341,  0.04566766,
        0.21911246, -0.06264939, -0.14541282,  0.02921362,  0.16920168,
       -0.14322437,  0.09360149,  0.18154031,  0.02777667, -0.1984061 ,
        0.05963977, -0.01801214, -0.06394113, -0.03574452,  0.14294291,
        0.08688795, -0.04537134, -0.06342497,  0.05068014,  0.03281254,
       -0.19994886,  0.09722292,  0.18802999, -0.02367761, -0.1542313 ,
        0.23971052, -0.0757667 , -0.20974192, -0.02112301,  0.16675664,
       -0.18883697,  0.01723272,  0.1539076 ,  0.04146766, -0.11060306,
        0.0588375 ,  0.03637581, -0.03413505, -0.044373  ,  0.00054116,
        0.0657003 , -0.05596494, -0.06830588,  0.03138151,  0.06787055,
       -0.14239218,  0.0469569 ,  0.11585812, -0.01787793, -0.10616006,
        0.12576847, -0.03067133, -0.10689352, -0.00877407,  0.08068606,
       -0.08489501, -0.01185446,  0.05034021,  0.01339004, -0.05076746,
       -0.00632143,  0.03093348,  0.00855886, -0.02871009, -0.02605347,
        0.04205857, -0.05532038, -0.06866154,  0.0027854 ,  0.03728272,
       -0.06443231,  0.0280406 ,  0.05857395, -0.00713182, -0.05639206,
        0.03970755, -0.19404585,  0.0563977 , -0.00163796, -0.09500802,
        0.05939316, -0.03109814, -0.02053245,  0.06570799, -0.07640743,
        0.04669048, -0.01015432, -0.02445957,  0.03479664, -0.02274832,
        0.02575691,  0.00368792, -0.01991262,  0.04915817]), array([-4.34084408e-02, -4.09342485e-02,  2.65139020e-02, -3.85352653e-04,
       -2.37438677e-02, -2.32178769e-01,  8.87345747e-03, -4.50527094e-02,
       -1.00067812e-01,  2.82161814e-02,  1.04196818e-01, -2.00262535e-01,
       -2.03294660e-02,  9.72604458e-02, -1.36083792e-01, -7.48680787e-02,
        2.02660507e-01, -5.22067618e-02, -1.82754630e-01,  4.30505596e-02,
       -4.77287501e-03, -1.85626840e-01,  2.23949700e-02,  8.06794307e-02,
       -2.49988449e-02, -8.98389272e-02, -1.09494116e-02, -3.55797915e-03,
        5.10069628e-02, -2.78244374e-02,  1.16521145e-01,  1.27991304e-01,
       -8.00659285e-02, -1.85311167e-01,  2.46938961e-02, -9.73642985e-02,
       -2.18158165e-01,  1.01513654e-01,  1.98125832e-01, -6.61137375e-02,
       -7.17338339e-03,  1.82440716e-01, -1.05020595e-01, -1.49120800e-01,
        8.03368345e-02,  6.28817465e-02, -1.24449841e-01,  3.85787187e-02,
        7.42033895e-02, -5.46099449e-02, -4.04937008e-02,  6.90792480e-02,
        3.33714863e-02, -2.32279583e-02, -4.44794478e-02, -2.47130871e-02,
       -2.85807400e-02, -8.02643786e-02,  5.82310983e-03,  1.59741043e-01,
        1.08795468e-01,  3.03729926e-02,  7.36056221e-02, -1.73830052e-02,
       -2.34586201e-01, -1.50919750e-01, -3.48050370e-02, -3.19646607e-02,
        2.76938164e-02,  2.34613149e-01,  1.31096361e-01,  3.10998765e-02,
       -1.16769247e-02, -1.27821163e-02, -1.29034691e-01,  6.75584657e-04,
        2.38427533e-02,  3.28093275e-02, -1.62702874e-02, -1.45063585e-02,
       -1.14102315e-01, -5.50365525e-02, -1.32233773e-02,  5.88800647e-02,
        1.66422911e-01,  1.83658737e-01,  8.48921388e-02,  8.32649620e-03,
       -3.74505177e-02, -1.91347632e-01, -1.34726131e-01, -5.19278153e-02,
       -2.09163611e-04,  2.64258348e-02,  1.39507201e-01, -2.91481974e-02,
        1.25008049e-01, -6.59865542e-03,  7.08736095e-03,  2.63942584e-02,
        2.34394666e-02, -2.71405031e-02,  3.69755681e-02, -2.60443508e-02,
        1.12531911e-02,  1.82920054e-02, -1.77256384e-02,  2.71365302e-02,
       -1.51242405e-02, -1.71696455e-02,  6.54979326e-03, -3.24476888e-03,
       -8.66958942e-03, -2.54726809e-02]), array([-0.02139709,  0.03158453, -0.03507035, -0.00272468,  0.04750027,
        0.0318295 , -0.18196346,  0.05830739,  0.10144178,  0.07870576,
       -0.10965987,  0.25244101, -0.04935513, -0.02788685,  0.02493503,
        0.19493034, -0.17987683,  0.09846987,  0.02796912, -0.05284957,
       -0.12799273,  0.12135051, -0.0637816 ,  0.00704649,  0.1143388 ,
        0.01494676, -0.04680916,  0.01912831,  0.03890395,  0.00828858,
        0.1223699 ,  0.01991668,  0.07971025, -0.045618  , -0.15089917,
       -0.13707058,  0.05004371, -0.12648433,  0.05024386,  0.24932615,
        0.11019225, -0.09260494,  0.14284795,  0.00179774, -0.17016237,
       -0.04001175,  0.11023956, -0.08037394, -0.01620548,  0.06142613,
        0.04696917, -0.03601905,  0.01405547, -0.0002621 ,  0.00172271,
       -0.07971049, -0.06768872,  0.07371022,  0.04777733,  0.01076838,
        0.14484757,  0.17695047, -0.12052221, -0.09671206, -0.06046256,
       -0.16286148, -0.21663353,  0.11138615,  0.11318843,  0.10616364,
        0.10426705,  0.16442628, -0.05946747, -0.07730848, -0.11481544,
        0.01444317, -0.02431953, -0.02087126, -0.02137098,  0.03956421,
       -0.13278735, -0.1195037 ,  0.07289367,  0.10370817,  0.04595249,
        0.15883715,  0.16910907, -0.09012284, -0.14075449, -0.11384852,
       -0.11464519, -0.14393465,  0.05193501,  0.09958551,  0.09458373,
        0.00981014, -0.02411583, -0.01375838, -0.02262922, -0.01349999,
       -0.00557331,  0.0127299 , -0.0333421 ,  0.01858022, -0.00759638,
       -0.00369256,  0.01172141, -0.02401477,  0.01310636, -0.00535535,
       -0.0108386 ,  0.01404043, -0.01621653,  0.03415014]), array([ 0.00796281,  0.01853589,  0.04711225,  0.04287372, -0.02297741,
        0.06595654,  0.14143825,  0.11972701, -0.06944997,  0.1462929 ,
        0.13201112, -0.0267701 , -0.07404073,  0.26021833, -0.04998643,
       -0.05351606,  0.06264448,  0.11164029, -0.18288882,  0.15452757,
       -0.00136169,  0.02647198,  0.03536293,  0.15081191, -0.11829742,
        0.17491411, -0.00878222, -0.11751798, -0.00470766,  0.14406561,
       -0.21527251,  0.07375515,  0.24141699, -0.04061472, -0.06744369,
        0.21725026, -0.0498826 , -0.20150954,  0.13010066,  0.04473158,
       -0.08445966,  0.06192808,  0.12762228, -0.12688441,  0.05012649,
       -0.04305217, -0.01874768,  0.03086103,  0.1278744 , -0.10498643,
        0.15886212, -0.00842143, -0.13943112, -0.06067032,  0.15905232,
       -0.17077561,  0.04545209,  0.19716161, -0.00801165, -0.13617329,
        0.13102753, -0.04866119, -0.1594605 ,  0.08025438,  0.08114555,
       -0.05165861,  0.03036163,  0.08330345, -0.10511715, -0.00641549,
       -0.01799611, -0.00748613,  0.0027775 ,  0.06797998, -0.04374928,
        0.05159909, -0.02472209, -0.07333853, -0.01643617,  0.03308851,
       -0.09434819,  0.01915514,  0.09290196, -0.05578462, -0.02806573,
        0.07038181, -0.04697162, -0.10876457,  0.0537755 , -0.01196735,
       -0.04215112,  0.02883283,  0.05328363, -0.04736155,  0.00892237,
        0.03095212, -0.13580905, -0.01605218, -0.02654142, -0.0050192 ,
       -0.07420426,  0.05998746, -0.05366216,  0.01727688,  0.01205305,
       -0.04635197,  0.06045373, -0.03427632,  0.01186724,  0.01696962,
       -0.01393503,  0.01184552, -0.0218195 ,  0.04719319]), array([-1.52330755e-02,  5.00705893e-02, -5.74467527e-02,  4.47715801e-02,
       -2.85357537e-02, -1.03064719e-03, -8.11101865e-02,  1.77216087e-01,
       -1.21026389e-01, -1.13114227e-02,  2.94004855e-03,  1.29493086e-01,
       -2.62975430e-01,  1.83938377e-01,  1.26235762e-03,  3.19660104e-03,
       -1.41308654e-01,  2.70862796e-01, -1.90717357e-01,  2.87052590e-02,
        1.72253861e-02,  1.22109310e-01, -1.99040187e-01,  1.11317230e-01,
       -5.42303957e-02, -6.32356494e-02, -4.27035508e-02,  9.64198988e-02,
       -1.95496930e-03, -1.01206533e-02,  7.93839464e-02, -9.50924404e-02,
        7.91151901e-03, -8.17871497e-02,  1.30530375e-01, -1.01174168e-01,
        1.86762231e-01, -8.11235439e-02,  1.45850457e-01, -2.05249625e-01,
        9.00553373e-02, -1.76676417e-01,  1.29914684e-01, -1.64209710e-01,
        1.75896875e-01, -3.58629727e-02,  9.86751355e-02, -1.48181505e-01,
        1.37996012e-01, -4.73787052e-02, -4.11455967e-02, -1.89903894e-03,
        1.40896728e-01, -5.81749696e-02, -9.05307121e-02,  1.16977363e-01,
       -6.63269869e-02, -1.01818241e-01, -4.40826981e-02,  1.64418264e-01,
       -1.66120550e-01,  7.22944431e-02,  4.34993785e-02,  1.16959470e-01,
       -1.48669518e-01,  1.52834984e-01, -3.84683944e-02, -8.51165357e-03,
       -1.37925930e-01,  6.18325066e-02, -8.65932480e-02, -8.59077766e-03,
       -8.62341393e-03,  9.01380135e-02,  5.90780183e-03, -4.69766343e-03,
        2.17481779e-02,  1.05378571e-02, -2.89516355e-03, -3.22524031e-02,
        7.56629875e-02, -1.59510994e-02, -6.99929306e-03, -7.29810527e-02,
        2.81943010e-02, -1.05254865e-01,  2.21457753e-04,  3.17367712e-03,
        9.18623999e-02, -2.18282446e-02,  7.36281270e-02,  4.47477237e-03,
        1.30359615e-03, -6.40329259e-02,  1.86761614e-02, -5.88849098e-03,
        2.93030341e-02, -3.81020607e-02,  2.83807743e-02, -1.45704166e-02,
        1.24700779e-02, -2.70129842e-02,  3.07934803e-02, -2.15966846e-02,
       -1.73028747e-03,  3.04247625e-02, -4.49044313e-02,  4.20579959e-02,
       -2.73243892e-02,  6.74639839e-03,  5.59810113e-03, -8.54831999e-03,
        2.18539661e-02, -3.92417967e-03]), array([-0.05974165, -0.02863127, -0.05328946, -0.02158808, -0.07815104,
       -0.15331062, -0.22798197, -0.22467176, -0.25137556, -0.17508544,
       -0.30851884, -0.12455972, -0.06533457, -0.09592317, -0.28772071,
        0.03158997, -0.13871583, -0.11342193, -0.14918561,  0.03161732,
       -0.1108125 , -0.01797099, -0.10886844, -0.02792891, -0.12703144,
       -0.08880811, -0.0998659 , -0.01316589, -0.09028165, -0.08293242,
       -0.05767423, -0.06900827, -0.05496497, -0.05226628, -0.03798915,
        0.0136355 ,  0.00252926, -0.11828423, -0.02196406, -0.03344976,
       -0.10462166, -0.07233978,  0.08543021, -0.04475868, -0.04571661,
        0.0300781 ,  0.00425063, -0.10646386,  0.00472111, -0.01104916,
        0.02754907, -0.00594573, -0.01409241, -0.04360754,  0.00797762,
       -0.0982516 , -0.0057041 ,  0.07583806,  0.0037619 , -0.06452304,
        0.09088979, -0.04454182, -0.15800472,  0.01303801,  0.10366959,
       -0.05743354,  0.07622839,  0.17082455, -0.01813478, -0.11255029,
        0.03260311, -0.04918046, -0.08249219,  0.01807077,  0.09412848,
        0.06022112,  0.03932238, -0.00330116,  0.04543444,  0.03855942,
       -0.03264227,  0.04500114,  0.09823917, -0.02424918, -0.05579134,
        0.0576551 , -0.00525508, -0.01613375,  0.09474376,  0.11159075,
        0.01994598,  0.0398577 ,  0.01489793, -0.02844422, -0.01988038,
       -0.08269943,  0.3144118 ,  0.13783784,  0.02733634,  0.08220546,
        0.07138363,  0.02386259,  0.00509934,  0.0271414 ,  0.00636966,
       -0.01176342,  0.0310494 , -0.02936155,  0.05307903, -0.05228182,
       -0.01831983,  0.03680765, -0.02388128, -0.12678315]), array([ 0.09592643,  0.00241533,  0.01942157, -0.00634408, -0.12315289,
        0.12664149,  0.06865072,  0.00109752, -0.10033347, -0.15661111,
       -0.07167806, -0.00702776, -0.03889329, -0.02461801,  0.04170613,
       -0.24744305, -0.18838893, -0.01167396,  0.13987413,  0.19107436,
        0.1411158 ,  0.05609811,  0.00251749, -0.06986869, -0.1937385 ,
        0.10226157,  0.15556869, -0.04010101, -0.16422266, -0.06087011,
       -0.14258898, -0.21384523,  0.03978626,  0.17059055,  0.08422064,
       -0.0569667 ,  0.04620498, -0.0406971 , -0.01506505,  0.04031521,
        0.17865605,  0.13365199,  0.01270044, -0.16629735, -0.16124221,
       -0.08819624, -0.19903977, -0.00382271,  0.18760347,  0.1027673 ,
       -0.07269945,  0.17043258,  0.00135973, -0.12528614,  0.0110644 ,
        0.14412971, -0.09228484, -0.00584985,  0.03729494, -0.07551367,
       -0.08375785,  0.00467897,  0.00234791,  0.00922765,  0.04230156,
       -0.07483309,  0.03302505, -0.0005055 , -0.00632239,  0.05520103,
        0.19861398, -0.02303622,  0.00379978, -0.02372154, -0.13892363,
       -0.19503166,  0.01314408,  0.00724717,  0.02914125,  0.14528908,
        0.06657779, -0.03083594, -0.03724139,  0.02693549, -0.01446945,
        0.07749828,  0.06872772,  0.06280212, -0.07422709, -0.10897767,
       -0.10960011, -0.05569325, -0.03712283,  0.085273  ,  0.15437816,
       -0.00616792,  0.01663694,  0.01102984,  0.02630751,  0.00770661,
       -0.00939035,  0.02510516,  0.00279249, -0.00723687,  0.00208686,
        0.01233801, -0.01041623,  0.00524291,  0.00320978, -0.01444512,
        0.00298671, -0.00418925,  0.01184507, -0.02502655]), array([-0.09426616,  0.08386254,  0.03491466, -0.0169148 , -0.03864787,
       -0.05071283,  0.03458752,  0.00478989, -0.04393474, -0.01724726,
        0.06667836, -0.07739751, -0.01623999,  0.07895914, -0.02223963,
        0.03802697,  0.00851625, -0.01792141, -0.08376279,  0.12067887,
       -0.17299571,  0.1152067 ,  0.09296765,  0.06460313, -0.15360304,
        0.26130038, -0.16745081, -0.10771164,  0.00162836,  0.16065821,
       -0.19269615,  0.16098045,  0.07274784,  0.00915115, -0.08266816,
        0.10708695, -0.06676183, -0.02362444, -0.04143793,  0.08562827,
       -0.0222715 , -0.00201478,  0.04406601,  0.0923005 , -0.0994693 ,
        0.02426293,  0.06131707, -0.11412729, -0.05796488,  0.15250082,
       -0.06013922, -0.06542788,  0.20094364,  0.0153397 , -0.15447289,
        0.09494868,  0.04342336, -0.18738312,  0.02630902,  0.10839268,
       -0.0594232 ,  0.00650481,  0.07567737, -0.04036955, -0.00118936,
       -0.02687647, -0.04648193,  0.09435247,  0.06160498, -0.11895527,
        0.13361468,  0.07796417, -0.21410325, -0.0823625 ,  0.20015729,
       -0.17324758, -0.06556519,  0.24498841,  0.07374896, -0.19636327,
        0.14883627,  0.017067  , -0.17849819, -0.02462724,  0.13925027,
       -0.0707134 ,  0.04022457,  0.0725811 , -0.02575104, -0.05341546,
        0.00880461, -0.06019774, -0.00261682,  0.03756161, -0.00874407,
       -0.00067065,  0.03587364, -0.0116095 , -0.03479787,  0.05916521,
       -0.08601516,  0.04513249, -0.02975989,  0.01560219, -0.03664468,
        0.04882764, -0.04667105,  0.00587139,  0.02604737, -0.05869699,
        0.06854289, -0.04905289,  0.00357807,  0.00442632])])
        whiten = False
        explained_variance = np.array([23119.139476369754, 6779.584178771451, 2285.9532196386635, 1941.6162827858238, 1644.6761187568977, 1042.660643818692, 769.2188950201424, 698.9353205961903, 659.8822439475999, 571.9244295986084, 502.23087644069034, 395.3988059359965, 333.94104674544934, 320.49814239581394, 302.6151026585032, 279.28502423962715, 249.3050678525028, 231.8844977299733, 217.19445613159203, 204.39920828361687, 195.03312324776445, 171.48402282406687, 165.8866613556448, 151.71118994045574, 147.77417415466329, 128.08406662049472, 115.27694432803825, 114.20815279593852, 96.72582102129195, 92.2239548349022, 89.13611380350518, 87.9949402422566, 87.03703711953298, 85.64511818382923, 82.70850406266347, 77.05853745510386, 75.96466602775494])
        X = X - mean

    X_transformed = np.dot(X, components.T)
    if whiten:
        X_transformed /= np.sqrt(explained_variance)
    return X_transformed

# Preprocessor for CSV files
def preprocess(inputcsvfile, outputcsvfile, headerless=False, testfile=False, target='', ignorecolumns=[], ignorelabels=[]):
    il=[]
    
    ignorelabels=[]
    ignorecolumns=[]
    target=""


    if (testfile):
        target = ''
    
    with open(outputcsvfile, "w+") as outputfile:
        with open(inputcsvfile) as csvfile:
            reader = csv.reader(csvfile)
            if (headerless == False):
                header=next(reader, None)
                try:
                    if (target != ''): 
                        hc = header.index(target)
                    else:
                        hc = len(header) - 1
                        target=header[hc]
                except:
                    raise NameError("Target '" + target + "' not found! Header must be same as in file passed to btc.")
                for i in range(0, len(ignorecolumns)):
                    try:
                        col = header.index(ignorecolumns[i])
                        if (col == hc):
                            raise ValueError("Attribute '" + ignorecolumns[i] + "' is the target. Header must be same as in file passed to btc.")
                        il=il+[col]
                    except ValueError:
                        raise
                    except:
                        raise NameError("Attribute '" + ignorecolumns[i] + "' not found in header. Header must be same as in file passed to btc.")
                for i in range(0, len(header)):      
                    if (i == hc):
                        continue
                    if (i in il):
                        continue
                    print(header[i] + ",", end='', file=outputfile)
                print(header[hc], file=outputfile)

                for row in csv.DictReader(open(inputcsvfile)):
                    if (row[target] in ignorelabels):
                        continue
                    for name in header:
                        if (name in ignorecolumns):
                            continue
                        if (name==target):
                            continue
                        if (',' in row[name]):
                            print ('"' + row[name] + '"' + ",", end='', file=outputfile)
                        else:
                            print (row[name] + ",", end='', file=outputfile)
                    print (row[target], file=outputfile)

            else:
                try:
                    if (target != ""): 
                        hc = int(target)
                    else:
                        hc =- 1
                except:
                    raise NameError("No header found but attribute name given as target. Header must be same as in file passed to btc.")
                for i in range(0, len(ignorecolumns)):
                    try:
                        col = int(ignorecolumns[i])
                        if (col == hc):
                            raise ValueError("Attribute " + str(col) + " is the target. Cannot ignore. Header must be same as in file passed to btc.")
                        il = il + [col]
                    except ValueError:
                        raise
                    except:
                        raise ValueError("No header found but attribute name given in ignore column list. Header must be same as in file passed to btc.")
                for row in reader:
                    if (hc == -1):
                        hc = len(row) - 1
                    if (row[hc] in ignorelabels):
                        continue
                    for i in range(0, len(row)):
                        if (i in il):
                            continue
                        if (i == hc):
                            continue
                        if (',' in row[i]):
                            print ('"' + row[i] + '"'+",", end='', file=outputfile)
                        else:
                            print(row[i]+",", end = '', file=outputfile)
                    print (row[hc], file=outputfile)

def clean(filename, outfile, rounding=-1, headerless=False, testfile=False):
    
    clean.classlist = []
    clean.testfile = testfile
    clean.mapping = {}
    

    def convert(cell):
        value = str(cell)
        try:
            result = int(value)
            return result
        except:
            try:
                result = float(value)
                if (rounding != -1):
                    result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
                return result
            except:
                result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
                return result

    # function to return key for any value 
    def get_key(val, clean_classmapping):
        if clean_classmapping == {}:
            return val
        for key, value in clean_classmapping.items(): 
            if val == value:
                return key
        if val not in list(clean_classmapping.values):
            raise ValueError("Label key does not exist")

    def convertclassid(cell):
        if (clean.testfile):
            return convert(cell)
        value = str(cell)
        if (value == ''):
            raise ValueError("All cells in the target column must contain a class label.")

        if (not clean.mapping == {}):
            result = -1
            try:
                result = clean.mapping[cell]
            except:
                raise ValueError("Class label '" + value + "' encountered in input not defined in user-provided mapping.")
            if (not result == int(result)):
                raise ValueError("Class labels must be mapped to integer.")
            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
            return result
        try:
            result = float(cell)
            if (rounding != -1):
                result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
            else:
                result = int(int(result * 100) / 100)  # round classes to two digits

            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
        except:
            result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
            if (result in clean.classlist):
                result = clean.classlist.index(result)
            else:
                clean.classlist = clean.classlist + [result]
                result = clean.classlist.index(result)
            if (not result == int(result)):
                raise ValueError("Class labels must be mappable to integer.")
        finally:
            if (result < 0):
                raise ValueError("Integer class labels must be positive and contiguous.")

        return result

    rowcount = 0
    with open(filename) as csv_file:
        reader = csv.reader(csv_file)
        f = open(outfile, "w+")
        if (headerless == False):
            next(reader, None)
        outbuf = []
        for row in reader:
            if (row == []):  # Skip empty rows
                continue
            rowcount = rowcount + 1
            rowlen = num_attr
            if (not testfile):
                rowlen = rowlen + 1    
            if (not len(row) == rowlen):
                raise ValueError("Column count must match trained predictor. Row " + str(rowcount) + " differs.")
            i = 0
            for elem in row:
                if(i + 1 < len(row)):
                    outbuf.append(str(convert(elem)))
                    outbuf.append(',')
                else:
                    classid = str(convertclassid(elem))
                    outbuf.append(classid)
                i = i + 1
            if (len(outbuf) < IOBUF):
                outbuf.append(os.linesep)
            else:
                print(''.join(outbuf), file=f)
                outbuf = []
        print(''.join(outbuf), end="", file=f)
        f.close()

        if (testfile == False and not len(clean.classlist) >= 2):
            raise ValueError("Number of classes must be at least 2.")

        return get_key, clean.mapping

# Helper (save an import)
def argmax(l):
    f = lambda i: l[i]
    return max(range(len(l)), key=f)
# Classifier
def single_classify(row):
    #inits
    x = row
    o = [0] * num_output_logits


    #Nueron Equations
    h_0 = max((((133.21948 * float(x[0]))+ (27.718904 * float(x[1]))+ (82.30607 * float(x[2]))+ (21.212904 * float(x[3]))+ (-33.53495 * float(x[4]))+ (14.023101 * float(x[5]))+ (-2.197702 * float(x[6]))+ (24.140856 * float(x[7]))+ (-8.956888 * float(x[8]))+ (-27.20585 * float(x[9]))+ (12.213677 * float(x[10]))+ (-18.148386 * float(x[11]))+ (24.956444 * float(x[12]))+ (-10.037283 * float(x[13]))+ (-11.156047 * float(x[14]))+ (-9.210958 * float(x[15]))+ (-4.893051 * float(x[16]))+ (-14.022248 * float(x[17]))+ (-4.399624 * float(x[18]))+ (1.711081 * float(x[19]))+ (2.5742161 * float(x[20]))+ (-9.026249 * float(x[21]))+ (8.917353 * float(x[22]))+ (-7.335711 * float(x[23]))+ (2.849411 * float(x[24]))+ (-10.095387 * float(x[25]))+ (-0.36321852 * float(x[26]))+ (-14.603016 * float(x[27]))+ (9.0379305 * float(x[28]))+ (-5.5363235 * float(x[29]))+ (-0.46569398 * float(x[30]))+ (1.5428524 * float(x[31]))+ (3.3412728 * float(x[32]))+ (23.700699 * float(x[33]))+ (-8.933414 * float(x[34]))+ (2.1908333 * float(x[35]))+ (12.412491 * float(x[36]))) + -6.5016427), 0)
    h_1 = max((((65.268036 * float(x[0]))+ (3.5571024 * float(x[1]))+ (12.9434595 * float(x[2]))+ (7.6774993 * float(x[3]))+ (-13.2502575 * float(x[4]))+ (0.23848449 * float(x[5]))+ (-4.556751 * float(x[6]))+ (8.382559 * float(x[7]))+ (20.390957 * float(x[8]))+ (11.006421 * float(x[9]))+ (7.0247684 * float(x[10]))+ (-18.462578 * float(x[11]))+ (0.38464892 * float(x[12]))+ (22.38002 * float(x[13]))+ (8.946519 * float(x[14]))+ (-2.3521059 * float(x[15]))+ (3.5352304 * float(x[16]))+ (0.25287294 * float(x[17]))+ (1.3006346 * float(x[18]))+ (-5.51806 * float(x[19]))+ (-14.823215 * float(x[20]))+ (-2.5857532 * float(x[21]))+ (-7.4859085 * float(x[22]))+ (-3.283308 * float(x[23]))+ (8.454415 * float(x[24]))+ (3.5763338 * float(x[25]))+ (3.4984534 * float(x[26]))+ (0.24339822 * float(x[27]))+ (10.261247 * float(x[28]))+ (3.0578473 * float(x[29]))+ (-0.9321084 * float(x[30]))+ (0.12662436 * float(x[31]))+ (-8.9307375 * float(x[32]))+ (2.9407203 * float(x[33]))+ (-22.599058 * float(x[34]))+ (-7.248775 * float(x[35]))+ (-7.333367 * float(x[36]))) + -1.8218651), 0)
    h_2 = max((((-16.699642 * float(x[0]))+ (39.55121 * float(x[1]))+ (9.354808 * float(x[2]))+ (-1.3785826 * float(x[3]))+ (27.31972 * float(x[4]))+ (-9.222184 * float(x[5]))+ (6.3637824 * float(x[6]))+ (-14.411771 * float(x[7]))+ (-40.24663 * float(x[8]))+ (-16.03144 * float(x[9]))+ (-2.542299 * float(x[10]))+ (33.236736 * float(x[11]))+ (-0.77404034 * float(x[12]))+ (-32.98826 * float(x[13]))+ (-15.577312 * float(x[14]))+ (-2.3529167 * float(x[15]))+ (1.6125296 * float(x[16]))+ (20.256617 * float(x[17]))+ (7.88033 * float(x[18]))+ (1.9059937 * float(x[19]))+ (20.391737 * float(x[20]))+ (2.278039 * float(x[21]))+ (8.354831 * float(x[22]))+ (9.865588 * float(x[23]))+ (-7.4004593 * float(x[24]))+ (-10.721373 * float(x[25]))+ (3.1566284 * float(x[26]))+ (10.064942 * float(x[27]))+ (-1.1298652 * float(x[28]))+ (-9.798633 * float(x[29]))+ (-2.906539 * float(x[30]))+ (-12.4132395 * float(x[31]))+ (-16.659037 * float(x[32]))+ (-13.329415 * float(x[33]))+ (51.26517 * float(x[34]))+ (13.631534 * float(x[35]))+ (-5.8191595 * float(x[36]))) + 18.704432), 0)
    h_3 = max((((-3.0042307 * float(x[0]))+ (15.113941 * float(x[1]))+ (24.35055 * float(x[2]))+ (-12.549305 * float(x[3]))+ (4.759993 * float(x[4]))+ (-0.6968964 * float(x[5]))+ (-0.72745013 * float(x[6]))+ (-1.6161215 * float(x[7]))+ (-11.286437 * float(x[8]))+ (4.19169 * float(x[9]))+ (10.037553 * float(x[10]))+ (-0.62444174 * float(x[11]))+ (2.1452682 * float(x[12]))+ (3.1602502 * float(x[13]))+ (5.463328 * float(x[14]))+ (-7.501398 * float(x[15]))+ (3.5541236 * float(x[16]))+ (-3.9030447 * float(x[17]))+ (6.0626273 * float(x[18]))+ (-5.0389924 * float(x[19]))+ (-9.323608 * float(x[20]))+ (-5.9275513 * float(x[21]))+ (-2.5735116 * float(x[22]))+ (3.6296425 * float(x[23]))+ (5.0766664 * float(x[24]))+ (-3.002574 * float(x[25]))+ (-2.6802688 * float(x[26]))+ (-2.8721116 * float(x[27]))+ (-0.74605197 * float(x[28]))+ (0.6517219 * float(x[29]))+ (-9.113842 * float(x[30]))+ (-1.0170882 * float(x[31]))+ (-0.30183664 * float(x[32]))+ (-6.259729 * float(x[33]))+ (-11.087641 * float(x[34]))+ (-4.407235 * float(x[35]))+ (-5.6215353 * float(x[36]))) + 8.842758), 0)
    h_4 = max((((1.0862874 * float(x[0]))+ (-7.4547973 * float(x[1]))+ (38.35544 * float(x[2]))+ (-4.5788283 * float(x[3]))+ (-17.778984 * float(x[4]))+ (13.9193535 * float(x[5]))+ (-3.3464193 * float(x[6]))+ (4.098765 * float(x[7]))+ (-2.92227 * float(x[8]))+ (-45.171032 * float(x[9]))+ (1.8653708 * float(x[10]))+ (7.894198 * float(x[11]))+ (5.493345 * float(x[12]))+ (-10.575973 * float(x[13]))+ (20.281452 * float(x[14]))+ (4.96922 * float(x[15]))+ (21.5387 * float(x[16]))+ (-5.3868403 * float(x[17]))+ (10.1913595 * float(x[18]))+ (2.6606712 * float(x[19]))+ (-14.295313 * float(x[20]))+ (-1.506353 * float(x[21]))+ (1.5659168 * float(x[22]))+ (-13.558213 * float(x[23]))+ (0.42094323 * float(x[24]))+ (15.619935 * float(x[25]))+ (20.36158 * float(x[26]))+ (0.7304991 * float(x[27]))+ (4.0123076 * float(x[28]))+ (-1.5249332 * float(x[29]))+ (-3.2786489 * float(x[30]))+ (-2.9674296 * float(x[31]))+ (20.285881 * float(x[32]))+ (1.8479419 * float(x[33]))+ (-16.944883 * float(x[34]))+ (-9.8707285 * float(x[35]))+ (-7.111086 * float(x[36]))) + 0.10355318), 0)
    h_5 = max((((11.885798 * float(x[0]))+ (16.182846 * float(x[1]))+ (0.75566113 * float(x[2]))+ (19.80232 * float(x[3]))+ (29.30997 * float(x[4]))+ (-8.594024 * float(x[5]))+ (1.6615324 * float(x[6]))+ (-33.521767 * float(x[7]))+ (-20.547077 * float(x[8]))+ (-9.849137 * float(x[9]))+ (14.383237 * float(x[10]))+ (11.732175 * float(x[11]))+ (-0.07254314 * float(x[12]))+ (-21.170746 * float(x[13]))+ (11.613629 * float(x[14]))+ (-3.5292718 * float(x[15]))+ (-16.942825 * float(x[16]))+ (8.188093 * float(x[17]))+ (4.959378 * float(x[18]))+ (-3.0999057 * float(x[19]))+ (-3.4739494 * float(x[20]))+ (1.6619505 * float(x[21]))+ (5.0873055 * float(x[22]))+ (0.96248394 * float(x[23]))+ (6.4210625 * float(x[24]))+ (5.1993394 * float(x[25]))+ (2.751973 * float(x[26]))+ (15.036793 * float(x[27]))+ (-7.2373304 * float(x[28]))+ (-10.2399235 * float(x[29]))+ (6.0588593 * float(x[30]))+ (-9.249024 * float(x[31]))+ (-19.443056 * float(x[32]))+ (-1.4205513 * float(x[33]))+ (22.33117 * float(x[34]))+ (6.898307 * float(x[35]))+ (-2.419049 * float(x[36]))) + 3.5498488), 0)
    h_6 = max((((3.9274304 * float(x[0]))+ (-3.9943678 * float(x[1]))+ (12.235325 * float(x[2]))+ (-40.533096 * float(x[3]))+ (10.345769 * float(x[4]))+ (14.424246 * float(x[5]))+ (-1.3789848 * float(x[6]))+ (-10.1346035 * float(x[7]))+ (25.536104 * float(x[8]))+ (-6.8624177 * float(x[9]))+ (3.4389074 * float(x[10]))+ (-16.987188 * float(x[11]))+ (-0.4693771 * float(x[12]))+ (6.2748837 * float(x[13]))+ (22.884909 * float(x[14]))+ (-13.038745 * float(x[15]))+ (3.6165993 * float(x[16]))+ (5.629776 * float(x[17]))+ (-7.1646857 * float(x[18]))+ (4.1110044 * float(x[19]))+ (-1.4993163 * float(x[20]))+ (-1.4606247 * float(x[21]))+ (1.2001061 * float(x[22]))+ (-3.655465 * float(x[23]))+ (-4.169609 * float(x[24]))+ (5.719775 * float(x[25]))+ (0.3939287 * float(x[26]))+ (-3.534546 * float(x[27]))+ (-4.397998 * float(x[28]))+ (1.1474656 * float(x[29]))+ (4.936806 * float(x[30]))+ (0.49526083 * float(x[31]))+ (1.7826704 * float(x[32]))+ (4.043026 * float(x[33]))+ (-6.8400674 * float(x[34]))+ (8.097053 * float(x[35]))+ (7.447077 * float(x[36]))) + 6.4836073), 0)
    h_7 = max((((0.0 * float(x[0]))+ (0.0 * float(x[1]))+ (0.0 * float(x[2]))+ (0.0 * float(x[3]))+ (0.0 * float(x[4]))+ (0.0 * float(x[5]))+ (0.0 * float(x[6]))+ (0.0 * float(x[7]))+ (0.0 * float(x[8]))+ (0.0 * float(x[9]))+ (0.0 * float(x[10]))+ (0.0 * float(x[11]))+ (0.0 * float(x[12]))+ (0.0 * float(x[13]))+ (0.0 * float(x[14]))+ (0.0 * float(x[15]))+ (0.0 * float(x[16]))+ (0.0 * float(x[17]))+ (0.0 * float(x[18]))+ (0.0 * float(x[19]))+ (0.0 * float(x[20]))+ (0.0 * float(x[21]))+ (0.0 * float(x[22]))+ (0.0 * float(x[23]))+ (0.0 * float(x[24]))+ (0.0 * float(x[25]))+ (0.0 * float(x[26]))+ (0.0 * float(x[27]))+ (0.0 * float(x[28]))+ (0.0 * float(x[29]))+ (0.0 * float(x[30]))+ (0.0 * float(x[31]))+ (0.0 * float(x[32]))+ (0.0 * float(x[33]))+ (0.0 * float(x[34]))+ (0.0 * float(x[35]))+ (0.0 * float(x[36]))) + 0.0), 0)
    h_8 = max((((0.0 * float(x[0]))+ (0.0 * float(x[1]))+ (0.0 * float(x[2]))+ (0.0 * float(x[3]))+ (0.0 * float(x[4]))+ (0.0 * float(x[5]))+ (0.0 * float(x[6]))+ (0.0 * float(x[7]))+ (0.0 * float(x[8]))+ (0.0 * float(x[9]))+ (0.0 * float(x[10]))+ (0.0 * float(x[11]))+ (0.0 * float(x[12]))+ (0.0 * float(x[13]))+ (0.0 * float(x[14]))+ (0.0 * float(x[15]))+ (0.0 * float(x[16]))+ (0.0 * float(x[17]))+ (0.0 * float(x[18]))+ (0.0 * float(x[19]))+ (0.0 * float(x[20]))+ (0.0 * float(x[21]))+ (0.0 * float(x[22]))+ (0.0 * float(x[23]))+ (0.0 * float(x[24]))+ (0.0 * float(x[25]))+ (0.0 * float(x[26]))+ (0.0 * float(x[27]))+ (0.0 * float(x[28]))+ (0.0 * float(x[29]))+ (0.0 * float(x[30]))+ (0.0 * float(x[31]))+ (0.0 * float(x[32]))+ (0.0 * float(x[33]))+ (0.0 * float(x[34]))+ (0.0 * float(x[35]))+ (0.0 * float(x[36]))) + 0.0), 0)
    o[0] = (1.6759655 * h_0)+ (3.2817404 * h_1)+ (2.2882612 * h_2)+ (-4.9120307 * h_3)+ (1.9692812 * h_4)+ (2.5398839 * h_5)+ (0.9841128 * h_6)+ (1.5768389 * h_7)+ (1.5768389 * h_8) + 9.089602
    o[1] = (1.6776094 * h_0)+ (3.2782712 * h_1)+ (2.2919216 * h_2)+ (1.8421719 * h_3)+ (1.9714022 * h_4)+ (2.542624 * h_5)+ (0.9860293 * h_6)+ (1.6919141 * h_7)+ (1.6919141 * h_8) + 0.18396679
    o[2] = (1.6773647 * h_0)+ (3.2786496 * h_1)+ (2.2923343 * h_2)+ (1.8399917 * h_3)+ (1.9710923 * h_4)+ (2.5434203 * h_5)+ (0.98442 * h_6)+ (1.1431612 * h_7)+ (1.1431612 * h_8) + 3.2741334

    

    #Output Decision Rule
    if num_output_logits==1:
        return o[0]>=0
    else:
        return argmax(o)


#for classifying batches
def classify(arr):
    outputs = []
    for row in arr:
        outputs.append(single_classify(row))
    return outputs


def Predict(arr,headerless,csvfile, get_key, classmapping):
    with open(csvfile, 'r') as csvinput:
        #readers and writers
        writer = csv.writer(sys.stdout, lineterminator=os.linesep)
        reader = csv.reader(csvinput)

        #print original header
        if (not headerless):
            writer.writerow(','.join(next(reader, None) + ["Prediction"]))
        
        
        for i, row in enumerate(reader):
            #use the transformed array as input to predictor
            pred = str(get_key(int(single_classify(arr[i])), classmapping))
            #use original untransformed line to write out
            row.append(pred)
            writer.writerow(row)


def Validate(arr):
    if n_classes == 2:
        count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0 = 0, 0, 0, 0, 0, 0, 0, 0
        outputs=[]
        for i, row in enumerate(arr):
            outputs.append(int(single_classify(arr[i, :-1].tolist())))
        outputs=np.array(outputs)
        correct_count = int(np.sum(outputs.reshape(-1) == arr[:, -1].reshape(-1)))
        count = outputs.shape[0]
        num_TP = int(np.sum(np.logical_and(outputs.reshape(-1) == 1, arr[:, -1].reshape(-1) == 1)))
        num_TN = int(np.sum(np.logical_and(outputs.reshape(-1) == 0, arr[:, -1].reshape(-1) == 0)))
        num_FN = int(np.sum(np.logical_and(outputs.reshape(-1) == 0, arr[:, -1].reshape(-1) == 1)))
        num_FP = int(np.sum(np.logical_and(outputs.reshape(-1) == 1, arr[:, -1].reshape(-1) == 0)))
        num_class_0 = int(np.sum(arr[:, -1].reshape(-1) == 0))
        num_class_1 = int(np.sum(arr[:, -1].reshape(-1) == 1))
        return count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0
    else:
        numeachclass = {}
        count, correct_count = 0, 0
        preds = []
        for i, row in enumerate(arr):
            pred = int(single_classify(arr[i].tolist()))
            preds.append(pred)
            if pred == int(float(arr[i, -1])):
                correct_count += 1
                if int(float(arr[i, -1])) in numeachclass.keys():
                    numeachclass[int(float(arr[i, -1]))] += 1
                else:
                    numeachclass[int(float(arr[i, -1]))] = 0
            count += 1
        return count, correct_count, numeachclass, preds
    


# Main method
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Predictor trained on '+TRAINFILE)
    parser.add_argument('csvfile', type=str, help='CSV file containing test set (unlabeled).')
    parser.add_argument('-validate', action='store_true', help='Validation mode. csvfile must be labeled. Output is classification statistics rather than predictions.')
    parser.add_argument('-cleanfile',action='store_true',help='Use this flag to save prediction time if the csvfile you are passing has already been preprocessed. Implies headerless.')
    parser.add_argument('-headerless', help='Do not treat the first line of csvfile as a header.', action='store_true')
    args = parser.parse_args()
    faulthandler.enable()


    #clean if not already clean
    if not args.cleanfile:
        cleanfile = tempfile.NamedTemporaryFile().name
        preprocessedfile = tempfile.NamedTemporaryFile().name
        preprocess(args.csvfile,preprocessedfile,args.headerless,(not args.validate))
        get_key, classmapping = clean(preprocessedfile, cleanfile, -1, args.headerless, (not args.validate))
    else:
        cleanfile=args.csvfile
        preprocessedfile=args.csvfile
        get_key = lambda x, y: x
        classmapping = {}


    #load file
    cleanarr = np.loadtxt(cleanfile, delimiter=',', dtype='float64')


    #Normalize
    cleanarr = Normalize(cleanarr)


    #Transform
    if transform_true:
        if args.validate:
            trans = transform(cleanarr[:, :-1])
            cleanarr = np.concatenate((trans, cleanarr[:, -1].reshape(-1, 1)), axis = 1)
        else:
            cleanarr = transform(cleanarr)


    #Predict
    if not args.validate:
        Predict(cleanarr, args.headerless, preprocessedfile, get_key, classmapping)


    #Validate
    else:
        print("Classifier Type: Neural Network")
        if n_classes == 2:
            count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0 = Validate(cleanarr)
        else:
            count, correct_count, numeachclass, preds = Validate(cleanarr)
            #Correct Labels
            true_labels = cleanarr[:, -1]


        #Report Metrics
        model_cap = 372
        if n_classes == 2:
            #Base metrics
            FN = float(num_FN) * 100.0 / float(count)
            FP = float(num_FP) * 100.0 / float(count)
            TN = float(num_TN) * 100.0 / float(count)
            TP = float(num_TP) * 100.0 / float(count)
            num_correct = correct_count

            #Calculated Metrics
            if int(num_TP + num_FN) != 0:
                TPR = num_TP / (num_TP + num_FN) # Sensitivity, Recall
            if int(num_TN + num_FP) != 0:
                TNR = num_TN / (num_TN + num_FP) # Specificity
            if int(num_TP + num_FP) != 0:
                PPV = num_TP / (num_TP + num_FP) # Recall
            if int(num_FN + num_TP) != 0:
                FNR = num_FN / (num_FN + num_TP) # Miss rate
            if int(2 * num_TP + num_FP + num_FN) != 0:
                FONE = 2 * num_TP / (2 * num_TP + num_FP + num_FN) # F1 Score
            if int(num_TP + num_FN + num_FP) != 0:
                TS = num_TP / (num_TP + num_FN + num_FP) # Critical Success Index
            #Best Guess Accuracy
            randguess = int(float(10000.0 * max(num_class_1, num_class_0)) / count) / 100.0
            #Model Accuracy
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            #Report
            print("System Type:                        Binary classifier")
            print("Best-guess accuracy:                {:.2f}%".format(randguess))
            print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
            print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
            print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
            print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0) + " bits/bit")
            print("Model efficiency:                   {:.2f}%/parameter".format(int(100 * (modelacc - randguess) / model_cap) / 100.0))
            print("System behavior")
            print("True Negatives:                     {:.2f}%".format(TN) + " (" + str(int(num_TN)) + "/" + str(count) + ")")
            print("True Positives:                     {:.2f}%".format(TP) + " (" + str(int(num_TP)) + "/" + str(count) + ")")
            print("False Negatives:                    {:.2f}%".format(FN) + " (" + str(int(num_FN)) + "/" + str(count) + ")")
            print("False Positives:                    {:.2f}%".format(FP) + " (" + str(int(num_FP)) + "/" + str(count) + ")")
            if int(num_TP + num_FN) != 0:
                print("True Pos. Rate/Sensitivity/Recall:  {:.2f}".format(TPR))
            if int(num_TN + num_FP) != 0:
                print("True Neg. Rate/Specificity:         {:.2f}".format(TNR))
            if int(num_TP + num_FP) != 0:
                print("Precision:                          {:.2f}".format(PPV))
            if int(2 * num_TP + num_FP + num_FN) != 0:
                print("F-1 Measure:                        {:.2f}".format(FONE))
            if int(num_TP + num_FN) != 0:
                print("False Negative Rate/Miss Rate:      {:.2f}".format(FNR))
            if int(num_TP + num_FN + num_FP) != 0:
                print("Critical Success Index:             {:.2f}".format(TS))

        #Multiclass
        else:
            num_correct = correct_count
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            randguess = round(max(numeachclass.values()) / sum(numeachclass.values()) * 100, 2)
            print("System Type:                        " + str(n_classes) + "-way classifier")
            print("Best-guess accuracy:                {:.2f}%".format(randguess))
            print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
            print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
            print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
            print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0) + " bits/bit")
            try:
                import numpy as np # For numpy see: http://numpy.org
                from numpy import array
            except:
                print("Note: If you install numpy (https://www.numpy.org) and scipy (https://www.scipy.org) this predictor generates a confusion matrix")

            def confusion_matrix(y_true, y_pred, labels=None, sample_weight=None, normalize=None):
                #check for numpy/scipy is imported
                try:
                    from scipy.sparse import coo_matrix #required for multiclass metrics
                except:
                    print("Note: If you install scipy (https://www.scipy.org) this predictor generates a confusion matrix")
                    sys.exit()
                # Compute confusion matrix to evaluate the accuracy of a classification.
                # By definition a confusion matrix :math:C is such that :math:C_{i, j}
                # is equal to the number of observations known to be in group :math:i and
                # predicted to be in group :math:j.
                # Thus in binary classification, the count of true negatives is
                # :math:C_{0,0}, false negatives is :math:C_{1,0}, true positives is
                # :math:C_{1,1} and false positives is :math:C_{0,1}.
                # Read more in the :ref:User Guide <confusion_matrix>.
                # Parameters
                # ----------
                # y_true : array-like of shape (n_samples,)
                # Ground truth (correct) target values.
                # y_pred : array-like of shape (n_samples,)
                # Estimated targets as returned by a classifier.
                # labels : array-like of shape (n_classes), default=None
                # List of labels to index the matrix. This may be used to reorder
                # or select a subset of labels.
                # If None is given, those that appear at least once
                # in y_true or y_pred are used in sorted order.
                # sample_weight : array-like of shape (n_samples,), default=None
                # Sample weights.
                # normalize : {'true', 'pred', 'all'}, default=None
                # Normalizes confusion matrix over the true (rows), predicted (columns)
                # conditions or all the population. If None, confusion matrix will not be
                # normalized.
                # Returns
                # -------
                # C : ndarray of shape (n_classes, n_classes)
                # Confusion matrix.
                # References
                # ----------
                if labels is None:
                    labels = np.array(list(set(list(y_true.astype('int')))))
                else:
                    labels = np.asarray(labels)
                    if np.all([l not in y_true for l in labels]):
                        raise ValueError("At least one label specified must be in y_true")


                if sample_weight is None:
                    sample_weight = np.ones(y_true.shape[0], dtype=np.int64)
                else:
                    sample_weight = np.asarray(sample_weight)
                if y_true.shape[0]!=y_pred.shape[0]:
                    raise ValueError("y_true and y_pred must be of the same length")

                if normalize not in ['true', 'pred', 'all', None]:
                    raise ValueError("normalize must be one of {'true', 'pred', 'all', None}")


                n_labels = labels.size
                label_to_ind = {y: x for x, y in enumerate(labels)}
                # convert yt, yp into index
                y_pred = np.array([label_to_ind.get(x, n_labels + 1) for x in y_pred])
                y_true = np.array([label_to_ind.get(x, n_labels + 1) for x in y_true])
                # intersect y_pred, y_true with labels, eliminate items not in labels
                ind = np.logical_and(y_pred < n_labels, y_true < n_labels)
                y_pred = y_pred[ind]
                y_true = y_true[ind]
                # also eliminate weights of eliminated items
                sample_weight = sample_weight[ind]
                # Choose the accumulator dtype to always have high precision
                if sample_weight.dtype.kind in {'i', 'u', 'b'}:
                    dtype = np.int64
                else:
                    dtype = np.float64
                cm = coo_matrix((sample_weight, (y_true, y_pred)), shape=(n_labels, n_labels), dtype=dtype,).toarray()


                with np.errstate(all='ignore'):
                    if normalize == 'true':
                        cm = cm / cm.sum(axis=1, keepdims=True)
                    elif normalize == 'pred':
                        cm = cm / cm.sum(axis=0, keepdims=True)
                    elif normalize == 'all':
                        cm = cm / cm.sum()
                    cm = np.nan_to_num(cm)
                return cm


            print("Confusion Matrix:")
            mtrx = confusion_matrix(np.array(true_labels).reshape(-1), np.array(preds).reshape(-1))
            mtrx = mtrx / np.sum(mtrx) * 100.0
            print(' ' + np.array2string(mtrx, formatter={'float': (lambda x: '{:.2f}%'.format(round(float(x), 2)))})[1:-1])


    #Clean Up
    if not args.cleanfile:
        os.remove(cleanfile)
        os.remove(preprocessedfile)
